// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Rect.dart" as rect_;

import "Matrix.dart" as matrix_;

import "ColorSpace.dart" as colorspace_;

import "Pixmap.dart" as pixmap_;

import "StructuredText.dart" as structuredtext_;

import "Quad.dart" as quad_;

import "Device.dart" as device_;

import "Cookie.dart" as cookie_;

/// from: com.artifex.mupdf.fitz.DisplayList
class DisplayList extends jni.JObject {
  @override
  late final jni.JObjType<DisplayList> $type = type;

  DisplayList.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/DisplayList");

  /// The type which includes information such as the signature of this class.
  static const type = $DisplayListType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Rect;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Rect rect)
  /// The returned object must be released after use, by calling the [release] method.
  factory DisplayList(
    rect_.Rect rect,
  ) {
    return DisplayList.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [rect.reference]).object);
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBounds", r"()Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public native com.artifex.mupdf.fitz.Rect getBounds()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBounds() {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBounds, jni.JniCallType.objectType, []).object);
  }

  static final _id_toPixmap = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toPixmap",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/ColorSpace;Z)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public native com.artifex.mupdf.fitz.Pixmap toPixmap(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.ColorSpace colorSpace, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pixmap_.Pixmap toPixmap(
    matrix_.Matrix matrix,
    colorspace_.ColorSpace colorSpace,
    bool z,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toPixmap, jni.JniCallType.objectType,
            [matrix.reference, colorSpace.reference, z ? 1 : 0]).object);
  }

  static final _id_toStructuredText = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toStructuredText",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/StructuredText;");

  /// from: public native com.artifex.mupdf.fitz.StructuredText toStructuredText(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  structuredtext_.StructuredText toStructuredText(
    jni.JString string,
  ) {
    return const structuredtext_.$StructuredTextType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toStructuredText,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_toStructuredText1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toStructuredText",
      r"()Lcom/artifex/mupdf/fitz/StructuredText;");

  /// from: public com.artifex.mupdf.fitz.StructuredText toStructuredText()
  /// The returned object must be released after use, by calling the [release] method.
  structuredtext_.StructuredText toStructuredText1() {
    return const structuredtext_.$StructuredTextType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toStructuredText1,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_search = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"search", r"(Ljava/lang/String;)[[Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public native com.artifex.mupdf.fitz.Quad[][] search(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<quad_.Quad> search(
    jni.JString string,
  ) {
    return const jni.JArrayType(quad_.$QuadType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_search, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_run = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"run",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void run(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.Cookie cookie)
  void run(
    device_.Device device,
    matrix_.Matrix matrix,
    rect_.Rect rect,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_run, jni.JniCallType.voidType, [
      device.reference,
      matrix.reference,
      rect.reference,
      cookie.reference
    ]).check();
  }

  static final _id_run1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"run",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public void run(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void run1(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_run1,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }
}

class $DisplayListType extends jni.JObjType<DisplayList> {
  const $DisplayListType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/DisplayList;";

  @override
  DisplayList fromRef(jni.JObjectPtr ref) => DisplayList.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DisplayListType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DisplayListType) && other is $DisplayListType;
  }
}

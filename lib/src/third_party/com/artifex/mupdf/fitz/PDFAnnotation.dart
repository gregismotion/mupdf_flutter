// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Device.dart" as device_;

import "Matrix.dart" as matrix_;

import "Cookie.dart" as cookie_;

import "ColorSpace.dart" as colorspace_;

import "Pixmap.dart" as pixmap_;

import "Rect.dart" as rect_;

import "DisplayList.dart" as displaylist_;

import "Quad.dart" as quad_;

import "Point.dart" as point_;

import "PDFObject.dart" as pdfobject_;

import "DefaultAppearance.dart" as defaultappearance_;

import "Buffer.dart" as buffer_;

import "Image.dart" as image_;

/// from: com.artifex.mupdf.fitz.PDFAnnotation
class PDFAnnotation extends jni.JObject {
  @override
  late final jni.JObjType<PDFAnnotation> $type = type;

  PDFAnnotation.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFAnnotation");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFAnnotationType();

  /// from: static public final int TYPE_TEXT
  static const TYPE_TEXT = 0;

  /// from: static public final int TYPE_LINK
  static const TYPE_LINK = 1;

  /// from: static public final int TYPE_FREE_TEXT
  static const TYPE_FREE_TEXT = 2;

  /// from: static public final int TYPE_LINE
  static const TYPE_LINE = 3;

  /// from: static public final int TYPE_SQUARE
  static const TYPE_SQUARE = 4;

  /// from: static public final int TYPE_CIRCLE
  static const TYPE_CIRCLE = 5;

  /// from: static public final int TYPE_POLYGON
  static const TYPE_POLYGON = 6;

  /// from: static public final int TYPE_POLY_LINE
  static const TYPE_POLY_LINE = 7;

  /// from: static public final int TYPE_HIGHLIGHT
  static const TYPE_HIGHLIGHT = 8;

  /// from: static public final int TYPE_UNDERLINE
  static const TYPE_UNDERLINE = 9;

  /// from: static public final int TYPE_SQUIGGLY
  static const TYPE_SQUIGGLY = 10;

  /// from: static public final int TYPE_STRIKE_OUT
  static const TYPE_STRIKE_OUT = 11;

  /// from: static public final int TYPE_REDACT
  static const TYPE_REDACT = 12;

  /// from: static public final int TYPE_STAMP
  static const TYPE_STAMP = 13;

  /// from: static public final int TYPE_CARET
  static const TYPE_CARET = 14;

  /// from: static public final int TYPE_INK
  static const TYPE_INK = 15;

  /// from: static public final int TYPE_POPUP
  static const TYPE_POPUP = 16;

  /// from: static public final int TYPE_FILE_ATTACHMENT
  static const TYPE_FILE_ATTACHMENT = 17;

  /// from: static public final int TYPE_SOUND
  static const TYPE_SOUND = 18;

  /// from: static public final int TYPE_MOVIE
  static const TYPE_MOVIE = 19;

  /// from: static public final int TYPE_RICH_MEDIA
  static const TYPE_RICH_MEDIA = 20;

  /// from: static public final int TYPE_WIDGET
  static const TYPE_WIDGET = 21;

  /// from: static public final int TYPE_SCREEN
  static const TYPE_SCREEN = 22;

  /// from: static public final int TYPE_PRINTER_MARK
  static const TYPE_PRINTER_MARK = 23;

  /// from: static public final int TYPE_TRAP_NET
  static const TYPE_TRAP_NET = 24;

  /// from: static public final int TYPE_WATERMARK
  static const TYPE_WATERMARK = 25;

  /// from: static public final int TYPE_3D
  static const TYPE_3D = 26;

  /// from: static public final int TYPE_PROJECTION
  static const TYPE_PROJECTION = 27;

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN = -1;

  /// from: static public final int LINE_ENDING_NONE
  static const LINE_ENDING_NONE = 0;

  /// from: static public final int LINE_ENDING_SQUARE
  static const LINE_ENDING_SQUARE = 1;

  /// from: static public final int LINE_ENDING_CIRCLE
  static const LINE_ENDING_CIRCLE = 2;

  /// from: static public final int LINE_ENDING_DIAMOND
  static const LINE_ENDING_DIAMOND = 3;

  /// from: static public final int LINE_ENDING_OPEN_ARROW
  static const LINE_ENDING_OPEN_ARROW = 4;

  /// from: static public final int LINE_ENDING_CLOSED_ARROW
  static const LINE_ENDING_CLOSED_ARROW = 5;

  /// from: static public final int LINE_ENDING_BUTT
  static const LINE_ENDING_BUTT = 6;

  /// from: static public final int LINE_ENDING_R_OPEN_ARROW
  static const LINE_ENDING_R_OPEN_ARROW = 7;

  /// from: static public final int LINE_ENDING_R_CLOSED_ARROW
  static const LINE_ENDING_R_CLOSED_ARROW = 8;

  /// from: static public final int LINE_ENDING_SLASH
  static const LINE_ENDING_SLASH = 9;

  /// from: static public final int BORDER_STYLE_SOLID
  static const BORDER_STYLE_SOLID = 0;

  /// from: static public final int BORDER_STYLE_DASHED
  static const BORDER_STYLE_DASHED = 1;

  /// from: static public final int BORDER_STYLE_BEVELED
  static const BORDER_STYLE_BEVELED = 2;

  /// from: static public final int BORDER_STYLE_INSET
  static const BORDER_STYLE_INSET = 3;

  /// from: static public final int BORDER_STYLE_UNDERLINE
  static const BORDER_STYLE_UNDERLINE = 4;

  /// from: static public final int BORDER_EFFECT_NONE
  static const BORDER_EFFECT_NONE = 0;

  /// from: static public final int BORDER_EFFECT_CLOUDY
  static const BORDER_EFFECT_CLOUDY = 1;

  /// from: static public final int IS_INVISIBLE
  static const IS_INVISIBLE = 1;

  /// from: static public final int IS_HIDDEN
  static const IS_HIDDEN = 2;

  /// from: static public final int IS_PRINT
  static const IS_PRINT = 4;

  /// from: static public final int IS_NO_ZOOM
  static const IS_NO_ZOOM = 8;

  /// from: static public final int IS_NO_ROTATE
  static const IS_NO_ROTATE = 16;

  /// from: static public final int IS_NO_VIEW
  static const IS_NO_VIEW = 32;

  /// from: static public final int IS_READ_ONLY
  static const IS_READ_ONLY = 64;

  /// from: static public final int IS_LOCKED
  static const IS_LOCKED = 128;

  /// from: static public final int IS_TOGGLE_NO_VIEW
  static const IS_TOGGLE_NO_VIEW = 256;

  /// from: static public final int IS_LOCKED_CONTENTS
  static const IS_LOCKED_CONTENTS = 512;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFAnnotation(
    int j,
  ) {
    return PDFAnnotation.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [j]).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [object.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }

  static final _id_run = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"run",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void run(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void run(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_run,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }

  static final _id_toPixmap = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toPixmap",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/ColorSpace;Z)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public native com.artifex.mupdf.fitz.Pixmap toPixmap(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.ColorSpace colorSpace, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pixmap_.Pixmap toPixmap(
    matrix_.Matrix matrix,
    colorspace_.ColorSpace colorSpace,
    bool z,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toPixmap, jni.JniCallType.objectType,
            [matrix.reference, colorSpace.reference, z ? 1 : 0]).object);
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBounds", r"()Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public native com.artifex.mupdf.fitz.Rect getBounds()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBounds() {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBounds, jni.JniCallType.objectType, []).object);
  }

  static final _id_toDisplayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toDisplayList",
      r"()Lcom/artifex/mupdf/fitz/DisplayList;");

  /// from: public native com.artifex.mupdf.fitz.DisplayList toDisplayList()
  /// The returned object must be released after use, by calling the [release] method.
  displaylist_.DisplayList toDisplayList() {
    return const displaylist_.$DisplayListType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toDisplayList,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getType =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getType", r"()I");

  /// from: public native int getType()
  int getType() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getType, jni.JniCallType.intType, []).integer;
  }

  static final _id_getFlags =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getFlags", r"()I");

  /// from: public native int getFlags()
  int getFlags() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFlags, jni.JniCallType.intType, []).integer;
  }

  static final _id_setFlags =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setFlags", r"(I)V");

  /// from: public native void setFlags(int i)
  void setFlags(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setFlags,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getContents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getContents", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getContents()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getContents() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getContents, jni.JniCallType.objectType, []).object);
  }

  static final _id_setContents = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setContents", r"(Ljava/lang/String;)V");

  /// from: public native void setContents(java.lang.String string)
  void setContents(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setContents,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_getRect = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getRect", r"()Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public native com.artifex.mupdf.fitz.Rect getRect()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getRect() {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getRect, jni.JniCallType.objectType, []).object);
  }

  static final _id_setRect = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setRect", r"(Lcom/artifex/mupdf/fitz/Rect;)V");

  /// from: public native void setRect(com.artifex.mupdf.fitz.Rect rect)
  void setRect(
    rect_.Rect rect,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setRect,
        jni.JniCallType.voidType, [rect.reference]).check();
  }

  static final _id_getBorder =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getBorder", r"()F");

  /// from: public native float getBorder()
  double getBorder() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBorder, jni.JniCallType.floatType, []).float;
  }

  static final _id_setBorder =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setBorder", r"(F)V");

  /// from: public native void setBorder(float f)
  void setBorder(
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setBorder,
        jni.JniCallType.voidType, [jni.JValueFloat(f)]).check();
  }

  static final _id_getColor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getColor", r"()[F");

  /// from: public native float[] getColor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getColor() {
    return const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getColor, jni.JniCallType.objectType, []).object);
  }

  static final _id_setColor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setColor", r"([F)V");

  /// from: public native void setColor(float[] fs)
  void setColor(
    jni.JArray<jni.jfloat> fs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setColor,
        jni.JniCallType.voidType, [fs.reference]).check();
  }

  static final _id_hasInteriorColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasInteriorColor", r"()Z");

  /// from: public native boolean hasInteriorColor()
  bool hasInteriorColor() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasInteriorColor,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getInteriorColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInteriorColor", r"()[F");

  /// from: public native float[] getInteriorColor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getInteriorColor() {
    return const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getInteriorColor,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setInteriorColor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setInteriorColor", r"([F)V");

  /// from: public native void setInteriorColor(float[] fs)
  void setInteriorColor(
    jni.JArray<jni.jfloat> fs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setInteriorColor,
        jni.JniCallType.voidType, [fs.reference]).check();
  }

  static final _id_getOpacity =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getOpacity", r"()F");

  /// from: public native float getOpacity()
  double getOpacity() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOpacity, jni.JniCallType.floatType, []).float;
  }

  static final _id_setOpacity =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setOpacity", r"(F)V");

  /// from: public native void setOpacity(float f)
  void setOpacity(
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setOpacity,
        jni.JniCallType.voidType, [jni.JValueFloat(f)]).check();
  }

  static final _id_hasAuthor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasAuthor", r"()Z");

  /// from: public native boolean hasAuthor()
  bool hasAuthor() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasAuthor, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getAuthor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getAuthor", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getAuthor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAuthor() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getAuthor, jni.JniCallType.objectType, []).object);
  }

  static final _id_setAuthor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setAuthor", r"(Ljava/lang/String;)V");

  /// from: public native void setAuthor(java.lang.String string)
  void setAuthor(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setAuthor,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_getCreationDateNative = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getCreationDateNative", r"()J");

  /// from: protected native long getCreationDateNative()
  int getCreationDateNative() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getCreationDateNative, jni.JniCallType.longType, []).long;
  }

  static final _id_setCreationDate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setCreationDate", r"(J)V");

  /// from: protected native void setCreationDate(long j)
  void setCreationDate(
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setCreationDate, jni.JniCallType.voidType, [j]).check();
  }

  static final _id_getModificationDateNative = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getModificationDateNative", r"()J");

  /// from: protected native long getModificationDateNative()
  int getModificationDateNative() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getModificationDateNative, jni.JniCallType.longType, []).long;
  }

  static final _id_setModificationDate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setModificationDate", r"(J)V");

  /// from: protected native void setModificationDate(long j)
  void setModificationDate(
    int j,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setModificationDate, jni.JniCallType.voidType, [j]).check();
  }

  static final _id_getCreationDate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getCreationDate", r"()Ljava/util/Date;");

  /// from: public java.util.Date getCreationDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCreationDate() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getCreationDate, jni.JniCallType.objectType, []).object);
  }

  static final _id_setCreationDate1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setCreationDate", r"(Ljava/util/Date;)V");

  /// from: public void setCreationDate(java.util.Date date)
  void setCreationDate1(
    jni.JObject date,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setCreationDate1,
        jni.JniCallType.voidType, [date.reference]).check();
  }

  static final _id_getModificationDate = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getModificationDate", r"()Ljava/util/Date;");

  /// from: public java.util.Date getModificationDate()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getModificationDate() {
    return const jni.JObjectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getModificationDate,
        jni.JniCallType.objectType, []).object);
  }

  static final _id_setModificationDate1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setModificationDate", r"(Ljava/util/Date;)V");

  /// from: public void setModificationDate(java.util.Date date)
  void setModificationDate1(
    jni.JObject date,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setModificationDate1,
        jni.JniCallType.voidType,
        [date.reference]).check();
  }

  static final _id_hasLineEndingStyles = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasLineEndingStyles", r"()Z");

  /// from: public native boolean hasLineEndingStyles()
  bool hasLineEndingStyles() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_hasLineEndingStyles, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getLineEndingStyles = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLineEndingStyles", r"()[I");

  /// from: public native int[] getLineEndingStyles()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getLineEndingStyles() {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getLineEndingStyles,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setLineEndingStyles = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setLineEndingStyles", r"(II)V");

  /// from: public native void setLineEndingStyles(int i, int i1)
  void setLineEndingStyles(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setLineEndingStyles,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_setLineEndingStyles1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setLineEndingStyles", r"([I)V");

  /// from: public void setLineEndingStyles(int[] is)
  void setLineEndingStyles1(
    jni.JArray<jni.jint> is0,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setLineEndingStyles1,
        jni.JniCallType.voidType,
        [is0.reference]).check();
  }

  static final _id_hasBorder =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasBorder", r"()Z");

  /// from: public native boolean hasBorder()
  bool hasBorder() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasBorder, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getBorderStyle = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderStyle", r"()I");

  /// from: public native int getBorderStyle()
  int getBorderStyle() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBorderStyle, jni.JniCallType.intType, []).integer;
  }

  static final _id_setBorderStyle = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBorderStyle", r"(I)V");

  /// from: public native void setBorderStyle(int i)
  void setBorderStyle(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setBorderStyle,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getBorderWidth = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderWidth", r"()F");

  /// from: public native float getBorderWidth()
  double getBorderWidth() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBorderWidth, jni.JniCallType.floatType, []).float;
  }

  static final _id_setBorderWidth = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBorderWidth", r"(F)V");

  /// from: public native void setBorderWidth(float f)
  void setBorderWidth(
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setBorderWidth,
        jni.JniCallType.voidType, [jni.JValueFloat(f)]).check();
  }

  static final _id_getBorderDashCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderDashCount", r"()I");

  /// from: public native int getBorderDashCount()
  int getBorderDashCount() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBorderDashCount, jni.JniCallType.intType, []).integer;
  }

  static final _id_getBorderDashItem = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderDashItem", r"(I)F");

  /// from: public native float getBorderDashItem(int i)
  double getBorderDashItem(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBorderDashItem,
        jni.JniCallType.floatType,
        [jni.JValueInt(i)]).float;
  }

  static final _id_clearBorderDash = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearBorderDash", r"()V");

  /// from: public native void clearBorderDash()
  void clearBorderDash() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearBorderDash, jni.JniCallType.voidType, []).check();
  }

  static final _id_addBorderDashItem = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"addBorderDashItem", r"(F)V");

  /// from: public native void addBorderDashItem(float f)
  void addBorderDashItem(
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addBorderDashItem,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f)]).check();
  }

  static final _id_setBorderDashPattern = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBorderDashPattern", r"([F)V");

  /// from: public void setBorderDashPattern(float[] fs)
  void setBorderDashPattern(
    jni.JArray<jni.jfloat> fs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setBorderDashPattern,
        jni.JniCallType.voidType,
        [fs.reference]).check();
  }

  static final _id_hasBorderEffect = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasBorderEffect", r"()Z");

  /// from: public native boolean hasBorderEffect()
  bool hasBorderEffect() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasBorderEffect,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getBorderEffect = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderEffect", r"()I");

  /// from: public native int getBorderEffect()
  int getBorderEffect() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBorderEffect, jni.JniCallType.intType, []).integer;
  }

  static final _id_setBorderEffect = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBorderEffect", r"(I)V");

  /// from: public native void setBorderEffect(int i)
  void setBorderEffect(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setBorderEffect,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getBorderEffectIntensity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBorderEffectIntensity", r"()F");

  /// from: public native float getBorderEffectIntensity()
  double getBorderEffectIntensity() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getBorderEffectIntensity, jni.JniCallType.floatType, []).float;
  }

  static final _id_setBorderEffectIntensity = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setBorderEffectIntensity", r"(F)V");

  /// from: public native void setBorderEffectIntensity(float f)
  void setBorderEffectIntensity(
    double f,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setBorderEffectIntensity,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f)]).check();
  }

  static final _id_hasQuadPoints = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasQuadPoints", r"()Z");

  /// from: public native boolean hasQuadPoints()
  bool hasQuadPoints() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasQuadPoints, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getQuadPointCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getQuadPointCount", r"()I");

  /// from: public native int getQuadPointCount()
  int getQuadPointCount() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getQuadPointCount, jni.JniCallType.intType, []).integer;
  }

  static final _id_getQuadPoint = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getQuadPoint", r"(I)Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public native com.artifex.mupdf.fitz.Quad getQuadPoint(int i)
  /// The returned object must be released after use, by calling the [release] method.
  quad_.Quad getQuadPoint(
    int i,
  ) {
    return const quad_.$QuadType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getQuadPoint,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_clearQuadPoints = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearQuadPoints", r"()V");

  /// from: public native void clearQuadPoints()
  void clearQuadPoints() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearQuadPoints, jni.JniCallType.voidType, []).check();
  }

  static final _id_addQuadPoint = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addQuadPoint", r"(Lcom/artifex/mupdf/fitz/Quad;)V");

  /// from: public native void addQuadPoint(com.artifex.mupdf.fitz.Quad quad)
  void addQuadPoint(
    quad_.Quad quad,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addQuadPoint,
        jni.JniCallType.voidType, [quad.reference]).check();
  }

  static final _id_getQuadPoints = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getQuadPoints", r"()[Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public com.artifex.mupdf.fitz.Quad[] getQuadPoints()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<quad_.Quad> getQuadPoints() {
    return const jni.JArrayType(quad_.$QuadType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getQuadPoints,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setQuadPoints = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setQuadPoints", r"([Lcom/artifex/mupdf/fitz/Quad;)V");

  /// from: public void setQuadPoints(com.artifex.mupdf.fitz.Quad[] quads)
  void setQuadPoints(
    jni.JArray<quad_.Quad> quads,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setQuadPoints,
        jni.JniCallType.voidType, [quads.reference]).check();
  }

  static final _id_hasVertices =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasVertices", r"()Z");

  /// from: public native boolean hasVertices()
  bool hasVertices() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasVertices, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getVertexCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getVertexCount", r"()I");

  /// from: public native int getVertexCount()
  int getVertexCount() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getVertexCount, jni.JniCallType.intType, []).integer;
  }

  static final _id_getVertex = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getVertex", r"(I)Lcom/artifex/mupdf/fitz/Point;");

  /// from: public native com.artifex.mupdf.fitz.Point getVertex(int i)
  /// The returned object must be released after use, by calling the [release] method.
  point_.Point getVertex(
    int i,
  ) {
    return const point_.$PointType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getVertex,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_clearVertices = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearVertices", r"()V");

  /// from: public native void clearVertices()
  void clearVertices() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearVertices, jni.JniCallType.voidType, []).check();
  }

  static final _id_addVertex =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"addVertex", r"(FF)V");

  /// from: public native void addVertex(float f, float f1)
  void addVertex(
    double f,
    double f1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addVertex,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f), jni.JValueFloat(f1)]).check();
  }

  static final _id_addVertex1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addVertex", r"(Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void addVertex(com.artifex.mupdf.fitz.Point point)
  void addVertex1(
    point_.Point point,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addVertex1,
        jni.JniCallType.voidType, [point.reference]).check();
  }

  static final _id_getVertices = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getVertices", r"()[Lcom/artifex/mupdf/fitz/Point;");

  /// from: public com.artifex.mupdf.fitz.Point[] getVertices()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<point_.Point> getVertices() {
    return const jni.JArrayType(point_.$PointType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getVertices, jni.JniCallType.objectType, []).object);
  }

  static final _id_setVertices = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setVertices", r"([Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void setVertices(com.artifex.mupdf.fitz.Point[] points)
  void setVertices(
    jni.JArray<point_.Point> points,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setVertices,
        jni.JniCallType.voidType, [points.reference]).check();
  }

  static final _id_hasInkList =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasInkList", r"()Z");

  /// from: public native boolean hasInkList()
  bool hasInkList() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasInkList, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getInkListCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInkListCount", r"()I");

  /// from: public native int getInkListCount()
  int getInkListCount() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getInkListCount, jni.JniCallType.intType, []).integer;
  }

  static final _id_getInkListStrokeCount = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInkListStrokeCount", r"(I)I");

  /// from: public native int getInkListStrokeCount(int i)
  int getInkListStrokeCount(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getInkListStrokeCount,
        jni.JniCallType.intType,
        [jni.JValueInt(i)]).integer;
  }

  static final _id_getInkListStrokeVertex = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getInkListStrokeVertex",
      r"(II)Lcom/artifex/mupdf/fitz/Point;");

  /// from: public native com.artifex.mupdf.fitz.Point getInkListStrokeVertex(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  point_.Point getInkListStrokeVertex(
    int i,
    int i1,
  ) {
    return const point_.$PointType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_getInkListStrokeVertex,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_clearInkList = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearInkList", r"()V");

  /// from: public native void clearInkList()
  void clearInkList() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearInkList, jni.JniCallType.voidType, []).check();
  }

  static final _id_addInkListStroke = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"addInkListStroke", r"()V");

  /// from: public native void addInkListStroke()
  void addInkListStroke() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_addInkListStroke, jni.JniCallType.voidType, []).check();
  }

  static final _id_addInkListStrokeVertex = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"addInkListStrokeVertex", r"(FF)V");

  /// from: public native void addInkListStrokeVertex(float f, float f1)
  void addInkListStrokeVertex(
    double f,
    double f1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addInkListStrokeVertex,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f), jni.JValueFloat(f1)]).check();
  }

  static final _id_addInkListStrokeVertex1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addInkListStrokeVertex",
      r"(Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void addInkListStrokeVertex(com.artifex.mupdf.fitz.Point point)
  void addInkListStrokeVertex1(
    point_.Point point,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_addInkListStrokeVertex1,
        jni.JniCallType.voidType,
        [point.reference]).check();
  }

  static final _id_addInkList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"addInkList", r"([Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void addInkList(com.artifex.mupdf.fitz.Point[] points)
  void addInkList(
    jni.JArray<point_.Point> points,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addInkList,
        jni.JniCallType.voidType, [points.reference]).check();
  }

  static final _id_setInkList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setInkList", r"([[Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void setInkList(com.artifex.mupdf.fitz.Point[][] points)
  void setInkList(
    jni.JArray<point_.Point> points,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setInkList,
        jni.JniCallType.voidType, [points.reference]).check();
  }

  static final _id_getInkList = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getInkList", r"()[[Lcom/artifex/mupdf/fitz/Point;");

  /// from: public com.artifex.mupdf.fitz.Point[][] getInkList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<point_.Point> getInkList() {
    return const jni.JArrayType(point_.$PointType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getInkList, jni.JniCallType.objectType, []).object);
  }

  static final _id_hasIcon =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasIcon", r"()Z");

  /// from: public native boolean hasIcon()
  bool hasIcon() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasIcon, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getIcon = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getIcon", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getIcon()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIcon() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getIcon, jni.JniCallType.objectType, []).object);
  }

  static final _id_setIcon = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setIcon", r"(Ljava/lang/String;)V");

  /// from: public native void setIcon(java.lang.String string)
  void setIcon(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setIcon,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_hasOpen =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasOpen", r"()Z");

  /// from: public native boolean hasOpen()
  bool hasOpen() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasOpen, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isOpen =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isOpen", r"()Z");

  /// from: public native boolean isOpen()
  bool isOpen() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isOpen, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setIsOpen =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setIsOpen", r"(Z)V");

  /// from: public native void setIsOpen(boolean z)
  void setIsOpen(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setIsOpen,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_eventEnter =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventEnter", r"()V");

  /// from: public native void eventEnter()
  void eventEnter() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventEnter, jni.JniCallType.voidType, []).check();
  }

  static final _id_eventExit =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventExit", r"()V");

  /// from: public native void eventExit()
  void eventExit() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventExit, jni.JniCallType.voidType, []).check();
  }

  static final _id_eventDown =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventDown", r"()V");

  /// from: public native void eventDown()
  void eventDown() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventDown, jni.JniCallType.voidType, []).check();
  }

  static final _id_eventUp =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventUp", r"()V");

  /// from: public native void eventUp()
  void eventUp() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventUp, jni.JniCallType.voidType, []).check();
  }

  static final _id_eventFocus =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventFocus", r"()V");

  /// from: public native void eventFocus()
  void eventFocus() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventFocus, jni.JniCallType.voidType, []).check();
  }

  static final _id_eventBlur =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"eventBlur", r"()V");

  /// from: public native void eventBlur()
  void eventBlur() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_eventBlur, jni.JniCallType.voidType, []).check();
  }

  static final _id_update =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"update", r"()Z");

  /// from: public native boolean update()
  bool update() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_update, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getObject = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getObject", r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject getObject()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject getObject() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getObject, jni.JniCallType.objectType, []).object);
  }

  static final _id_getLanguage =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getLanguage", r"()I");

  /// from: public native int getLanguage()
  int getLanguage() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLanguage, jni.JniCallType.intType, []).integer;
  }

  static final _id_setLanguage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setLanguage", r"(I)V");

  /// from: public native void setLanguage(int i)
  void setLanguage(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setLanguage,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_getQuadding =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getQuadding", r"()I");

  /// from: public native int getQuadding()
  int getQuadding() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getQuadding, jni.JniCallType.intType, []).integer;
  }

  static final _id_setQuadding = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setQuadding", r"(I)V");

  /// from: public native void setQuadding(int i)
  void setQuadding(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setQuadding,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_hasLine =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasLine", r"()Z");

  /// from: public native boolean hasLine()
  bool hasLine() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasLine, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getLine = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLine", r"()[Lcom/artifex/mupdf/fitz/Point;");

  /// from: public native com.artifex.mupdf.fitz.Point[] getLine()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<point_.Point> getLine() {
    return const jni.JArrayType(point_.$PointType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getLine, jni.JniCallType.objectType, []).object);
  }

  static final _id_setLine = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setLine",
      r"(Lcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public native void setLine(com.artifex.mupdf.fitz.Point point, com.artifex.mupdf.fitz.Point point1)
  void setLine(
    point_.Point point,
    point_.Point point1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setLine,
        jni.JniCallType.voidType, [point.reference, point1.reference]).check();
  }

  static final _id_getDefaultAppearance = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDefaultAppearance",
      r"()Lcom/artifex/mupdf/fitz/DefaultAppearance;");

  /// from: public native com.artifex.mupdf.fitz.DefaultAppearance getDefaultAppearance()
  /// The returned object must be released after use, by calling the [release] method.
  defaultappearance_.DefaultAppearance getDefaultAppearance() {
    return const defaultappearance_.$DefaultAppearanceType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(reference,
            _id_getDefaultAppearance, jni.JniCallType.objectType, []).object);
  }

  static final _id_setDefaultAppearance = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setDefaultAppearance", r"(Ljava/lang/String;F[F)V");

  /// from: public native void setDefaultAppearance(java.lang.String string, float f, float[] fs)
  void setDefaultAppearance(
    jni.JString string,
    double f,
    jni.JArray<jni.jfloat> fs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setDefaultAppearance,
        jni.JniCallType.voidType,
        [string.reference, jni.JValueFloat(f), fs.reference]).check();
  }

  static final _id_setNativeAppearance = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setNativeAppearance",
      r"(Ljava/lang/String;Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: protected native void setNativeAppearance(java.lang.String string, java.lang.String string1, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setNativeAppearance(
    jni.JString string,
    jni.JString string1,
    matrix_.Matrix matrix,
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setNativeAppearance, jni.JniCallType.voidType, [
      string.reference,
      string1.reference,
      matrix.reference,
      rect.reference,
      pDFObject.reference,
      buffer.reference
    ]).check();
  }

  static final _id_setNativeAppearanceDisplayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setNativeAppearanceDisplayList",
      r"(Ljava/lang/String;Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: protected native void setNativeAppearanceDisplayList(java.lang.String string, java.lang.String string1, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.DisplayList displayList)
  void setNativeAppearanceDisplayList(
    jni.JString string,
    jni.JString string1,
    matrix_.Matrix matrix,
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setNativeAppearanceDisplayList, jni.JniCallType.voidType, [
      string.reference,
      string1.reference,
      matrix.reference,
      displayList.reference
    ]).check();
  }

  static final _id_setNativeAppearanceImage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setNativeAppearanceImage",
      r"(Lcom/artifex/mupdf/fitz/Image;)V");

  /// from: protected native void setNativeAppearanceImage(com.artifex.mupdf.fitz.Image image)
  void setNativeAppearanceImage(
    image_.Image image,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setNativeAppearanceImage,
        jni.JniCallType.voidType,
        [image.reference]).check();
  }

  static final _id_setAppearance = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void setAppearance(java.lang.String string, java.lang.String string1, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setAppearance(
    jni.JString string,
    jni.JString string1,
    matrix_.Matrix matrix,
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setAppearance, jni.JniCallType.voidType, [
      string.reference,
      string1.reference,
      matrix.reference,
      rect.reference,
      pDFObject.reference,
      buffer.reference
    ]).check();
  }

  static final _id_setAppearance1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void setAppearance(java.lang.String string, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setAppearance1(
    jni.JString string,
    matrix_.Matrix matrix,
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setAppearance1, jni.JniCallType.voidType, [
      string.reference,
      matrix.reference,
      rect.reference,
      pDFObject.reference,
      buffer.reference
    ]).check();
  }

  static final _id_setAppearance2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void setAppearance(java.lang.String string, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setAppearance2(
    jni.JString string,
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setAppearance2, jni.JniCallType.voidType, [
      string.reference,
      rect.reference,
      pDFObject.reference,
      buffer.reference
    ]).check();
  }

  static final _id_setAppearance3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void setAppearance(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setAppearance3(
    matrix_.Matrix matrix,
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setAppearance3, jni.JniCallType.voidType, [
      matrix.reference,
      rect.reference,
      pDFObject.reference,
      buffer.reference
    ]).check();
  }

  static final _id_setAppearance4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void setAppearance(com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  void setAppearance4(
    rect_.Rect rect,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAppearance4,
        jni.JniCallType.voidType,
        [rect.reference, pDFObject.reference, buffer.reference]).check();
  }

  static final _id_setAppearance5 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void setAppearance(java.lang.String string, java.lang.String string1, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.DisplayList displayList)
  void setAppearance5(
    jni.JString string,
    jni.JString string1,
    matrix_.Matrix matrix,
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setAppearance5, jni.JniCallType.voidType, [
      string.reference,
      string1.reference,
      matrix.reference,
      displayList.reference
    ]).check();
  }

  static final _id_setAppearance6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void setAppearance(java.lang.String string, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.DisplayList displayList)
  void setAppearance6(
    jni.JString string,
    matrix_.Matrix matrix,
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAppearance6,
        jni.JniCallType.voidType,
        [string.reference, matrix.reference, displayList.reference]).check();
  }

  static final _id_setAppearance7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void setAppearance(java.lang.String string, com.artifex.mupdf.fitz.DisplayList displayList)
  void setAppearance7(
    jni.JString string,
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAppearance7,
        jni.JniCallType.voidType,
        [string.reference, displayList.reference]).check();
  }

  static final _id_setAppearance8 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void setAppearance(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.DisplayList displayList)
  void setAppearance8(
    matrix_.Matrix matrix,
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setAppearance8,
        jni.JniCallType.voidType,
        [matrix.reference, displayList.reference]).check();
  }

  static final _id_setAppearance9 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setAppearance",
      r"(Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void setAppearance(com.artifex.mupdf.fitz.DisplayList displayList)
  void setAppearance9(
    displaylist_.DisplayList displayList,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setAppearance9,
        jni.JniCallType.voidType, [displayList.reference]).check();
  }

  static final _id_setAppearance10 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setAppearance", r"(Lcom/artifex/mupdf/fitz/Image;)V");

  /// from: public void setAppearance(com.artifex.mupdf.fitz.Image image)
  void setAppearance10(
    image_.Image image,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setAppearance10,
        jni.JniCallType.voidType, [image.reference]).check();
  }

  static final _id_hasFileSpecification = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasFileSpecification", r"()Z");

  /// from: public native boolean hasFileSpecification()
  bool hasFileSpecification() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_hasFileSpecification, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setFileSpecification = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setFileSpecification",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)V");

  /// from: public native void setFileSpecification(com.artifex.mupdf.fitz.PDFObject pDFObject)
  void setFileSpecification(
    pdfobject_.PDFObject pDFObject,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setFileSpecification,
        jni.JniCallType.voidType,
        [pDFObject.reference]).check();
  }

  static final _id_getFileSpecification = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getFileSpecification",
      r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject getFileSpecification()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject getFileSpecification() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getFileSpecification,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getHiddenForEditing = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getHiddenForEditing", r"()Z");

  /// from: public native boolean getHiddenForEditing()
  bool getHiddenForEditing() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getHiddenForEditing, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setHiddenForEditing = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setHiddenForEditing", r"(Z)V");

  /// from: public native void setHiddenForEditing(boolean z)
  void setHiddenForEditing(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_setHiddenForEditing, jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_applyRedaction = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"applyRedaction", r"(ZI)Z");

  /// from: public native boolean applyRedaction(boolean z, int i)
  bool applyRedaction(
    bool z,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_applyRedaction,
        jni.JniCallType.booleanType, [z ? 1 : 0, jni.JValueInt(i)]).boolean;
  }
}

class $PDFAnnotationType extends jni.JObjType<PDFAnnotation> {
  const $PDFAnnotationType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PDFAnnotation;";

  @override
  PDFAnnotation fromRef(jni.JObjectPtr ref) => PDFAnnotation.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFAnnotationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFAnnotationType) &&
        other is $PDFAnnotationType;
  }
}

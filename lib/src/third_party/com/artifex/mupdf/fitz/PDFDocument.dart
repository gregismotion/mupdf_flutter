// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Document.dart" as document_;

import "PDFObject.dart" as pdfobject_;

import "PDFGraftMap.dart" as pdfgraftmap_;

import "Buffer.dart" as buffer_;

import "Rect.dart" as rect_;

import "Image.dart" as image_;

import "Font.dart" as font_;

import "SeekableInputOutputStream.dart" as seekableinputoutputstream_;

import "SeekableOutputStream.dart" as seekableoutputstream_;

import "SeekableInputStream.dart" as seekableinputstream_;

import "LinkDestination.dart" as linkdestination_;

/// from: com.artifex.mupdf.fitz.PDFDocument$JsEventListener$AlertResult
class PDFDocument_JsEventListener_AlertResult extends jni.JObject {
  @override
  late final jni.JObjType<PDFDocument_JsEventListener_AlertResult> $type = type;

  PDFDocument_JsEventListener_AlertResult.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"com/artifex/mupdf/fitz/PDFDocument$JsEventListener$AlertResult");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFDocument_JsEventListener_AlertResultType();
  static final _id_buttonPressed = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"buttonPressed",
    r"I",
  );

  /// from: public int buttonPressed
  int get buttonPressed => jni.Jni.accessors
      .getField(reference, _id_buttonPressed, jni.JniCallType.intType)
      .integer;

  /// from: public int buttonPressed
  set buttonPressed(int value) =>
      jni.Jni.env.SetIntField(reference, _id_buttonPressed, value);

  static final _id_checkboxChecked = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"checkboxChecked",
    r"Z",
  );

  /// from: public boolean checkboxChecked
  bool get checkboxChecked => jni.Jni.accessors
      .getField(reference, _id_checkboxChecked, jni.JniCallType.booleanType)
      .boolean;

  /// from: public boolean checkboxChecked
  set checkboxChecked(bool value) => jni.Jni.env
      .SetBooleanField(reference, _id_checkboxChecked, value ? 1 : 0);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFDocument_JsEventListener_AlertResult() {
    return PDFDocument_JsEventListener_AlertResult.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }
}

class $PDFDocument_JsEventListener_AlertResultType
    extends jni.JObjType<PDFDocument_JsEventListener_AlertResult> {
  const $PDFDocument_JsEventListener_AlertResultType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFDocument$JsEventListener$AlertResult;";

  @override
  PDFDocument_JsEventListener_AlertResult fromRef(jni.JObjectPtr ref) =>
      PDFDocument_JsEventListener_AlertResult.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFDocument_JsEventListener_AlertResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PDFDocument_JsEventListener_AlertResultType) &&
        other is $PDFDocument_JsEventListener_AlertResultType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFDocument$JsEventListener
class PDFDocument_JsEventListener extends jni.JObject {
  @override
  late final jni.JObjType<PDFDocument_JsEventListener> $type = type;

  PDFDocument_JsEventListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFDocument$JsEventListener");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFDocument_JsEventListenerType();

  /// from: static public final int BUTTON_GROUP_OK
  static const BUTTON_GROUP_OK = 0;

  /// from: static public final int BUTTON_GROUP_OK_CANCEL
  static const BUTTON_GROUP_OK_CANCEL = 1;

  /// from: static public final int BUTTON_GROUP_YES_NO
  static const BUTTON_GROUP_YES_NO = 2;

  /// from: static public final int BUTTON_GROUP_YES_NO_CANCEL
  static const BUTTON_GROUP_YES_NO_CANCEL = 3;

  /// from: static public final int BUTTON_NONE
  static const BUTTON_NONE = 0;

  /// from: static public final int BUTTON_OK
  static const BUTTON_OK = 1;

  /// from: static public final int BUTTON_CANCEL
  static const BUTTON_CANCEL = 2;

  /// from: static public final int BUTTON_NO
  static const BUTTON_NO = 3;

  /// from: static public final int BUTTON_YES
  static const BUTTON_YES = 4;

  static final _id_onAlert = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onAlert",
      r"(Lcom/artifex/mupdf/fitz/PDFDocument;Ljava/lang/String;Ljava/lang/String;IIZLjava/lang/String;Z)Lcom/artifex/mupdf/fitz/PDFDocument$JsEventListener$AlertResult;");

  /// from: public abstract com.artifex.mupdf.fitz.PDFDocument$JsEventListener$AlertResult onAlert(com.artifex.mupdf.fitz.PDFDocument pDFDocument, java.lang.String string, java.lang.String string1, int i, int i1, boolean z, java.lang.String string2, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  PDFDocument_JsEventListener_AlertResult onAlert(
    PDFDocument pDFDocument,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    bool z,
    jni.JString string2,
    bool z1,
  ) {
    return const $PDFDocument_JsEventListener_AlertResultType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference, _id_onAlert, jni.JniCallType.objectType, [
      pDFDocument.reference,
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      z ? 1 : 0,
      string2.reference,
      z1 ? 1 : 0
    ]).object);
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $PDFDocument_JsEventListenerImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r"onAlert(Lcom/artifex/mupdf/fitz/PDFDocument;Ljava/lang/String;Ljava/lang/String;IIZLjava/lang/String;Z)Lcom/artifex/mupdf/fitz/PDFDocument$JsEventListener$AlertResult;") {
        final $r = _$impls[$p]!.onAlert(
          $a[0].castTo(const $PDFDocumentType(), releaseOriginal: true),
          $a[1].castTo(const jni.JStringType(), releaseOriginal: true),
          $a[2].castTo(const jni.JStringType(), releaseOriginal: true),
          $a[3]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[4]
              .castTo(const jni.JIntegerType(), releaseOriginal: true)
              .intValue(releaseOriginal: true),
          $a[5]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
          $a[6].castTo(const jni.JStringType(), releaseOriginal: true),
          $a[7]
              .castTo(const jni.JBooleanType(), releaseOriginal: true)
              .booleanValue(releaseOriginal: true),
        );
        return ($r as jni.JObject).castTo(const jni.JObjectType()).toPointer();
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory PDFDocument_JsEventListener.implement(
    $PDFDocument_JsEventListenerImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = PDFDocument_JsEventListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.artifex.mupdf.fitz.PDFDocument$JsEventListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $PDFDocument_JsEventListenerImpl {
  factory $PDFDocument_JsEventListenerImpl({
    required PDFDocument_JsEventListener_AlertResult Function(
            PDFDocument pDFDocument,
            jni.JString string,
            jni.JString string1,
            int i,
            int i1,
            bool z,
            jni.JString string2,
            bool z1)
        onAlert,
  }) = _$PDFDocument_JsEventListenerImpl;

  PDFDocument_JsEventListener_AlertResult onAlert(
      PDFDocument pDFDocument,
      jni.JString string,
      jni.JString string1,
      int i,
      int i1,
      bool z,
      jni.JString string2,
      bool z1);
}

class _$PDFDocument_JsEventListenerImpl
    implements $PDFDocument_JsEventListenerImpl {
  _$PDFDocument_JsEventListenerImpl({
    required PDFDocument_JsEventListener_AlertResult Function(
            PDFDocument pDFDocument,
            jni.JString string,
            jni.JString string1,
            int i,
            int i1,
            bool z,
            jni.JString string2,
            bool z1)
        onAlert,
  }) : _onAlert = onAlert;

  final PDFDocument_JsEventListener_AlertResult Function(
      PDFDocument pDFDocument,
      jni.JString string,
      jni.JString string1,
      int i,
      int i1,
      bool z,
      jni.JString string2,
      bool z1) _onAlert;

  PDFDocument_JsEventListener_AlertResult onAlert(
      PDFDocument pDFDocument,
      jni.JString string,
      jni.JString string1,
      int i,
      int i1,
      bool z,
      jni.JString string2,
      bool z1) {
    return _onAlert(pDFDocument, string, string1, i, i1, z, string2, z1);
  }
}

class $PDFDocument_JsEventListenerType
    extends jni.JObjType<PDFDocument_JsEventListener> {
  const $PDFDocument_JsEventListenerType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFDocument$JsEventListener;";

  @override
  PDFDocument_JsEventListener fromRef(jni.JObjectPtr ref) =>
      PDFDocument_JsEventListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFDocument_JsEventListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFDocument_JsEventListenerType) &&
        other is $PDFDocument_JsEventListenerType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFDocument$PDFEmbeddedFileParams
class PDFDocument_PDFEmbeddedFileParams extends jni.JObject {
  @override
  late final jni.JObjType<PDFDocument_PDFEmbeddedFileParams> $type = type;

  PDFDocument_PDFEmbeddedFileParams.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"com/artifex/mupdf/fitz/PDFDocument$PDFEmbeddedFileParams");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFDocument_PDFEmbeddedFileParamsType();
  static final _id_filename = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"filename",
    r"Ljava/lang/String;",
  );

  /// from: public final java.lang.String filename
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get filename => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_filename, jni.JniCallType.objectType)
      .object);

  static final _id_mimetype = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"mimetype",
    r"Ljava/lang/String;",
  );

  /// from: public final java.lang.String mimetype
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get mimetype => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_mimetype, jni.JniCallType.objectType)
      .object);

  static final _id_size = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"size",
    r"I",
  );

  /// from: public final int size
  int get size => jni.Jni.accessors
      .getField(reference, _id_size, jni.JniCallType.intType)
      .integer;

  static final _id_creationDate = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"creationDate",
    r"Ljava/util/Date;",
  );

  /// from: public final java.util.Date creationDate
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get creationDate =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_creationDate, jni.JniCallType.objectType)
          .object);

  static final _id_modificationDate = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"modificationDate",
    r"Ljava/util/Date;",
  );

  /// from: public final java.util.Date modificationDate
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject get modificationDate =>
      const jni.JObjectType().fromRef(jni.Jni.accessors
          .getField(reference, _id_modificationDate, jni.JniCallType.objectType)
          .object);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/String;IJJ)V");

  /// from: protected void <init>(java.lang.String string, java.lang.String string1, int i, long j, long j1)
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFDocument_PDFEmbeddedFileParams(
    jni.JString string,
    jni.JString string1,
    int i,
    int j,
    int j1,
  ) {
    return PDFDocument_PDFEmbeddedFileParams.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [
      string.reference,
      string1.reference,
      jni.JValueInt(i),
      j,
      j1
    ]).object);
  }
}

class $PDFDocument_PDFEmbeddedFileParamsType
    extends jni.JObjType<PDFDocument_PDFEmbeddedFileParams> {
  const $PDFDocument_PDFEmbeddedFileParamsType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFDocument$PDFEmbeddedFileParams;";

  @override
  PDFDocument_PDFEmbeddedFileParams fromRef(jni.JObjectPtr ref) =>
      PDFDocument_PDFEmbeddedFileParams.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFDocument_PDFEmbeddedFileParamsType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFDocument_PDFEmbeddedFileParamsType) &&
        other is $PDFDocument_PDFEmbeddedFileParamsType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFDocument
class PDFDocument extends document_.Document {
  @override
  late final jni.JObjType<PDFDocument> $type = type;

  PDFDocument.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFDocument");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFDocumentType();

  /// from: static public final int LANGUAGE_UNSET
  static const LANGUAGE_UNSET = 0;

  /// from: static public final int LANGUAGE_ur
  static const LANGUAGE_ur = 507;

  /// from: static public final int LANGUAGE_urd
  static const LANGUAGE_urd = 3423;

  /// from: static public final int LANGUAGE_ko
  static const LANGUAGE_ko = 416;

  /// from: static public final int LANGUAGE_ja
  static const LANGUAGE_ja = 37;

  /// from: static public final int LANGUAGE_zh
  static const LANGUAGE_zh = 242;

  /// from: static public final int LANGUAGE_zh_Hans
  static const LANGUAGE_zh_Hans = 14093;

  /// from: static public final int LANGUAGE_zh_Hant
  static const LANGUAGE_zh_Hant = 14822;

  /// from: static public final int PAGE_LABEL_NONE
  static const PAGE_LABEL_NONE = 0;

  /// from: static public final int PAGE_LABEL_DECIMAL
  static const PAGE_LABEL_DECIMAL = 68;

  /// from: static public final int PAGE_LABEL_ROMAN_UC
  static const PAGE_LABEL_ROMAN_UC = 82;

  /// from: static public final int PAGE_LABEL_ROMAN_LC
  static const PAGE_LABEL_ROMAN_LC = 114;

  /// from: static public final int PAGE_LABEL_ALPHA_UC
  static const PAGE_LABEL_ALPHA_UC = 65;

  /// from: static public final int PAGE_LABEL_ALPHA_LC
  static const PAGE_LABEL_ALPHA_LC = 97;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFDocument(
    int j,
  ) {
    return PDFDocument.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [j]).object);
  }

  static final _id_new1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PDFDocument.new1() {
    return PDFDocument.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1, []).object);
  }

  static final _id_isPDF =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isPDF", r"()Z");

  /// from: public boolean isPDF()
  bool isPDF() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isPDF, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_findPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"findPage", r"(I)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject findPage(int i)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject findPage(
    int i,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_findPage, jni.JniCallType.objectType,
            [jni.JValueInt(i)]).object);
  }

  static final _id_getTrailer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTrailer", r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject getTrailer()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject getTrailer() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getTrailer, jni.JniCallType.objectType, []).object);
  }

  static final _id_countObjects = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"countObjects", r"()I");

  /// from: public native int countObjects()
  int countObjects() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_countObjects, jni.JniCallType.intType, []).integer;
  }

  static final _id_newNull = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"newNull", r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newNull()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newNull() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_newNull, jni.JniCallType.objectType, []).object);
  }

  static final _id_newBoolean = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newBoolean",
      r"(Z)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newBoolean(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newBoolean(
    bool z,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newBoolean,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_newInteger = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newInteger",
      r"(I)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newInteger(int i)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newInteger(
    int i,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newInteger,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_newReal = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"newReal", r"(F)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newReal(float f)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newReal(
    double f,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newReal, jni.JniCallType.objectType,
            [jni.JValueFloat(f)]).object);
  }

  static final _id_newString = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"newString", r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newString(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newString(
    jni.JString string,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newString,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_newByteString = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newByteString",
      r"([B)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newByteString(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newByteString(
    jni.JArray<jni.jbyte> bs,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newByteString,
            jni.JniCallType.objectType, [bs.reference]).object);
  }

  static final _id_newName = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"newName", r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newName(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newName(
    jni.JString string,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newName, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_newIndirect = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newIndirect",
      r"(II)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newIndirect(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newIndirect(
    int i,
    int i1,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_newIndirect,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_newArray = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"newArray", r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newArray()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newArray() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_newArray, jni.JniCallType.objectType, []).object);
  }

  static final _id_newDictionary = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newDictionary",
      r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject newDictionary()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject newDictionary() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newDictionary,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_addObject = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addObject",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addObject(com.artifex.mupdf.fitz.PDFObject pDFObject)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addObject(
    pdfobject_.PDFObject pDFObject,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addObject,
            jni.JniCallType.objectType, [pDFObject.reference]).object);
  }

  static final _id_createObject = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createObject",
      r"()Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject createObject()
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject createObject() {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_createObject,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_deleteObject = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"deleteObject", r"(I)V");

  /// from: public native void deleteObject(int i)
  void deleteObject(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteObject,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_deleteObject1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"deleteObject",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)V");

  /// from: public void deleteObject(com.artifex.mupdf.fitz.PDFObject pDFObject)
  void deleteObject1(
    pdfobject_.PDFObject pDFObject,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteObject1,
        jni.JniCallType.voidType, [pDFObject.reference]).check();
  }

  static final _id_newPDFGraftMap = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"newPDFGraftMap",
      r"()Lcom/artifex/mupdf/fitz/PDFGraftMap;");

  /// from: public native com.artifex.mupdf.fitz.PDFGraftMap newPDFGraftMap()
  /// The returned object must be released after use, by calling the [release] method.
  pdfgraftmap_.PDFGraftMap newPDFGraftMap() {
    return const pdfgraftmap_.$PDFGraftMapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_newPDFGraftMap,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_graftObject = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"graftObject",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject graftObject(com.artifex.mupdf.fitz.PDFObject pDFObject)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject graftObject(
    pdfobject_.PDFObject pDFObject,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_graftObject,
            jni.JniCallType.objectType, [pDFObject.reference]).object);
  }

  static final _id_graftPage = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"graftPage", r"(ILcom/artifex/mupdf/fitz/PDFDocument;I)V");

  /// from: public native void graftPage(int i, com.artifex.mupdf.fitz.PDFDocument pDFDocument, int i1)
  void graftPage(
    int i,
    PDFDocument pDFDocument,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_graftPage,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), pDFDocument.reference, jni.JValueInt(i1)]).check();
  }

  static final _id_addRawStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRawStream",
      r"(Lcom/artifex/mupdf/fitz/Buffer;Ljava/lang/Object;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addRawStream(com.artifex.mupdf.fitz.Buffer buffer, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addRawStream(
    buffer_.Buffer buffer,
    jni.JObject object,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addRawStream,
            jni.JniCallType.objectType,
            [buffer.reference, object.reference]).object);
  }

  static final _id_addStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addStream",
      r"(Lcom/artifex/mupdf/fitz/Buffer;Ljava/lang/Object;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addStream(com.artifex.mupdf.fitz.Buffer buffer, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addStream(
    buffer_.Buffer buffer,
    jni.JObject object,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addStream,
            jni.JniCallType.objectType,
            [buffer.reference, object.reference]).object);
  }

  static final _id_addRawStream1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRawStream",
      r"(Ljava/lang/String;Ljava/lang/Object;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addRawStream(java.lang.String string, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addRawStream1(
    jni.JString string,
    jni.JObject object,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addRawStream1,
            jni.JniCallType.objectType,
            [string.reference, object.reference]).object);
  }

  static final _id_addStream1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addStream",
      r"(Ljava/lang/String;Ljava/lang/Object;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addStream(java.lang.String string, java.lang.Object object)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addStream1(
    jni.JString string,
    jni.JObject object,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addStream1,
            jni.JniCallType.objectType,
            [string.reference, object.reference]).object);
  }

  static final _id_addRawStream2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRawStream",
      r"(Lcom/artifex/mupdf/fitz/Buffer;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addRawStream(com.artifex.mupdf.fitz.Buffer buffer)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addRawStream2(
    buffer_.Buffer buffer,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addRawStream2,
            jni.JniCallType.objectType, [buffer.reference]).object);
  }

  static final _id_addStream2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addStream",
      r"(Lcom/artifex/mupdf/fitz/Buffer;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addStream(com.artifex.mupdf.fitz.Buffer buffer)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addStream2(
    buffer_.Buffer buffer,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addStream2,
            jni.JniCallType.objectType, [buffer.reference]).object);
  }

  static final _id_addRawStream3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addRawStream",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addRawStream(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addRawStream3(
    jni.JString string,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addRawStream3,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_addStream3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addStream",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addStream(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addStream3(
    jni.JString string,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addStream3,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_addPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPage",
      r"(Lcom/artifex/mupdf/fitz/Rect;ILcom/artifex/mupdf/fitz/PDFObject;Lcom/artifex/mupdf/fitz/Buffer;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addPage(com.artifex.mupdf.fitz.Rect rect, int i, com.artifex.mupdf.fitz.PDFObject pDFObject, com.artifex.mupdf.fitz.Buffer buffer)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addPage(
    rect_.Rect rect,
    int i,
    pdfobject_.PDFObject pDFObject,
    buffer_.Buffer buffer,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addPage, jni.JniCallType.objectType, [
      rect.reference,
      jni.JValueInt(i),
      pDFObject.reference,
      buffer.reference
    ]).object);
  }

  static final _id_addPage1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addPage",
      r"(Lcom/artifex/mupdf/fitz/Rect;ILcom/artifex/mupdf/fitz/PDFObject;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addPage(com.artifex.mupdf.fitz.Rect rect, int i, com.artifex.mupdf.fitz.PDFObject pDFObject, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addPage1(
    rect_.Rect rect,
    int i,
    pdfobject_.PDFObject pDFObject,
    jni.JString string,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addPage1, jni.JniCallType.objectType, [
      rect.reference,
      jni.JValueInt(i),
      pDFObject.reference,
      string.reference
    ]).object);
  }

  static final _id_insertPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"insertPage",
      r"(ILcom/artifex/mupdf/fitz/PDFObject;)V");

  /// from: public native void insertPage(int i, com.artifex.mupdf.fitz.PDFObject pDFObject)
  void insertPage(
    int i,
    pdfobject_.PDFObject pDFObject,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_insertPage,
        jni.JniCallType.voidType,
        [jni.JValueInt(i), pDFObject.reference]).check();
  }

  static final _id_deletePage =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"deletePage", r"(I)V");

  /// from: public native void deletePage(int i)
  void deletePage(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deletePage,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_addImage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addImage",
      r"(Lcom/artifex/mupdf/fitz/Image;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addImage(com.artifex.mupdf.fitz.Image image)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addImage(
    image_.Image image,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addImage, jni.JniCallType.objectType,
            [image.reference]).object);
  }

  static final _id_addSimpleFont = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addSimpleFont",
      r"(Lcom/artifex/mupdf/fitz/Font;I)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addSimpleFont(com.artifex.mupdf.fitz.Font font, int i)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addSimpleFont(
    font_.Font font,
    int i,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_addSimpleFont,
            jni.JniCallType.objectType,
            [font.reference, jni.JValueInt(i)]).object);
  }

  static final _id_addCJKFont = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addCJKFont",
      r"(Lcom/artifex/mupdf/fitz/Font;IIZ)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addCJKFont(com.artifex.mupdf.fitz.Font font, int i, int i1, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addCJKFont(
    font_.Font font,
    int i,
    int i1,
    bool z,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addCJKFont, jni.JniCallType.objectType, [
      font.reference,
      jni.JValueInt(i),
      jni.JValueInt(i1),
      z ? 1 : 0
    ]).object);
  }

  static final _id_addFont = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addFont",
      r"(Lcom/artifex/mupdf/fitz/Font;)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addFont(com.artifex.mupdf.fitz.Font font)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addFont(
    font_.Font font,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_addFont, jni.JniCallType.objectType,
            [font.reference]).object);
  }

  static final _id_hasUnsavedChanges = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasUnsavedChanges", r"()Z");

  /// from: public native boolean hasUnsavedChanges()
  bool hasUnsavedChanges() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_hasUnsavedChanges, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_wasRepaired =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"wasRepaired", r"()Z");

  /// from: public native boolean wasRepaired()
  bool wasRepaired() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_wasRepaired, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_canBeSavedIncrementally = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"canBeSavedIncrementally", r"()Z");

  /// from: public native boolean canBeSavedIncrementally()
  bool canBeSavedIncrementally() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_canBeSavedIncrementally, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isRedacted =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isRedacted", r"()Z");

  /// from: public native boolean isRedacted()
  bool isRedacted() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isRedacted, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_save = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"save", r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public native void save(java.lang.String string, java.lang.String string1)
  void save(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_save,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_nativeSaveWithStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"nativeSaveWithStream",
      r"(Lcom/artifex/mupdf/fitz/SeekableInputOutputStream;Ljava/lang/String;)V");

  /// from: protected native void nativeSaveWithStream(com.artifex.mupdf.fitz.SeekableInputOutputStream seekableInputOutputStream, java.lang.String string)
  void nativeSaveWithStream(
    seekableinputoutputstream_.SeekableInputOutputStream
        seekableInputOutputStream,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_nativeSaveWithStream,
        jni.JniCallType.voidType,
        [seekableInputOutputStream.reference, string.reference]).check();
  }

  static final _id_save1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"save",
      r"(Lcom/artifex/mupdf/fitz/SeekableInputOutputStream;Ljava/lang/String;)V");

  /// from: public void save(com.artifex.mupdf.fitz.SeekableInputOutputStream seekableInputOutputStream, java.lang.String string)
  void save1(
    seekableinputoutputstream_.SeekableInputOutputStream
        seekableInputOutputStream,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_save1,
        jni.JniCallType.voidType,
        [seekableInputOutputStream.reference, string.reference]).check();
  }

  static final _id_enableJs =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"enableJs", r"()V");

  /// from: public native void enableJs()
  void enableJs() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enableJs, jni.JniCallType.voidType, []).check();
  }

  static final _id_disableJs =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"disableJs", r"()V");

  /// from: public native void disableJs()
  void disableJs() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_disableJs, jni.JniCallType.voidType, []).check();
  }

  static final _id_isJsSupported = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isJsSupported", r"()Z");

  /// from: public native boolean isJsSupported()
  bool isJsSupported() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isJsSupported, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_setJsEventListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setJsEventListener",
      r"(Lcom/artifex/mupdf/fitz/PDFDocument$JsEventListener;)V");

  /// from: public native void setJsEventListener(com.artifex.mupdf.fitz.PDFDocument$JsEventListener jsEventListener)
  void setJsEventListener(
    PDFDocument_JsEventListener jsEventListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setJsEventListener,
        jni.JniCallType.voidType,
        [jsEventListener.reference]).check();
  }

  static final _id_calculate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"calculate", r"()V");

  /// from: public native void calculate()
  void calculate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_calculate, jni.JniCallType.voidType, []).check();
  }

  static final _id_getVersion =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getVersion", r"()I");

  /// from: public native int getVersion()
  int getVersion() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getVersion, jni.JniCallType.intType, []).integer;
  }

  static final _id_hasAcroForm =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasAcroForm", r"()Z");

  /// from: public boolean hasAcroForm()
  bool hasAcroForm() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasAcroForm, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasXFAForm =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasXFAForm", r"()Z");

  /// from: public boolean hasXFAForm()
  bool hasXFAForm() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasXFAForm, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_countVersions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"countVersions", r"()I");

  /// from: public native int countVersions()
  int countVersions() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_countVersions, jni.JniCallType.intType, []).integer;
  }

  static final _id_countUnsavedVersions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"countUnsavedVersions", r"()I");

  /// from: public native int countUnsavedVersions()
  int countUnsavedVersions() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_countUnsavedVersions, jni.JniCallType.intType, []).integer;
  }

  static final _id_validateChangeHistory = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"validateChangeHistory", r"()I");

  /// from: public native int validateChangeHistory()
  int validateChangeHistory() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_validateChangeHistory, jni.JniCallType.intType, []).integer;
  }

  static final _id_wasPureXFA =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"wasPureXFA", r"()Z");

  /// from: public native boolean wasPureXFA()
  bool wasPureXFA() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_wasPureXFA, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_wasLinearized = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"wasLinearized", r"()Z");

  /// from: public native boolean wasLinearized()
  bool wasLinearized() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_wasLinearized, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_enableJournal = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"enableJournal", r"()V");

  /// from: public native void enableJournal()
  void enableJournal() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_enableJournal, jni.JniCallType.voidType, []).check();
  }

  static final _id_saveJournal = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"saveJournal", r"(Ljava/lang/String;)V");

  /// from: public native void saveJournal(java.lang.String string)
  void saveJournal(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_saveJournal,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_saveJournalWithStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"saveJournalWithStream",
      r"(Lcom/artifex/mupdf/fitz/SeekableOutputStream;)V");

  /// from: public native void saveJournalWithStream(com.artifex.mupdf.fitz.SeekableOutputStream seekableOutputStream)
  void saveJournalWithStream(
    seekableoutputstream_.SeekableOutputStream seekableOutputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_saveJournalWithStream,
        jni.JniCallType.voidType,
        [seekableOutputStream.reference]).check();
  }

  static final _id_loadJournal = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"loadJournal", r"(Ljava/lang/String;)V");

  /// from: public native void loadJournal(java.lang.String string)
  void loadJournal(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_loadJournal,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_loadJournalWithStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadJournalWithStream",
      r"(Lcom/artifex/mupdf/fitz/SeekableInputStream;)V");

  /// from: public native void loadJournalWithStream(com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream)
  void loadJournalWithStream(
    seekableinputstream_.SeekableInputStream seekableInputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadJournalWithStream,
        jni.JniCallType.voidType,
        [seekableInputStream.reference]).check();
  }

  static final _id_undoRedoPosition = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"undoRedoPosition", r"()I");

  /// from: public native int undoRedoPosition()
  int undoRedoPosition() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_undoRedoPosition, jni.JniCallType.intType, []).integer;
  }

  static final _id_undoRedoSteps = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"undoRedoSteps", r"()I");

  /// from: public native int undoRedoSteps()
  int undoRedoSteps() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_undoRedoSteps, jni.JniCallType.intType, []).integer;
  }

  static final _id_undoRedoStep = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"undoRedoStep", r"(I)Ljava/lang/String;");

  /// from: public native java.lang.String undoRedoStep(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString undoRedoStep(
    int i,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_undoRedoStep,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_canUndo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"canUndo", r"()Z");

  /// from: public native boolean canUndo()
  bool canUndo() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_canUndo, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_canRedo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"canRedo", r"()Z");

  /// from: public native boolean canRedo()
  bool canRedo() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_canRedo, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_undo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"undo", r"()V");

  /// from: public native void undo()
  void undo() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_undo, jni.JniCallType.voidType, []).check();
  }

  static final _id_redo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"redo", r"()V");

  /// from: public native void redo()
  void redo() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_redo, jni.JniCallType.voidType, []).check();
  }

  static final _id_beginOperation = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"beginOperation", r"(Ljava/lang/String;)V");

  /// from: public native void beginOperation(java.lang.String string)
  void beginOperation(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_beginOperation,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_beginImplicitOperation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"beginImplicitOperation", r"()V");

  /// from: public native void beginImplicitOperation()
  void beginImplicitOperation() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_beginImplicitOperation, jni.JniCallType.voidType, []).check();
  }

  static final _id_endOperation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"endOperation", r"()V");

  /// from: public native void endOperation()
  void endOperation() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_endOperation, jni.JniCallType.voidType, []).check();
  }

  static final _id_abandonOperation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"abandonOperation", r"()V");

  /// from: public native void abandonOperation()
  void abandonOperation() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_abandonOperation, jni.JniCallType.voidType, []).check();
  }

  static final _id_getLanguage =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getLanguage", r"()I");

  /// from: public native int getLanguage()
  int getLanguage() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLanguage, jni.JniCallType.intType, []).integer;
  }

  static final _id_setLanguage = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setLanguage", r"(I)V");

  /// from: public native void setLanguage(int i)
  void setLanguage(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setLanguage,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_setPageLabels = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setPageLabels", r"(IILjava/lang/String;I)V");

  /// from: public native void setPageLabels(int i, int i1, java.lang.String string, int i2)
  void setPageLabels(
    int i,
    int i1,
    jni.JString string,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_setPageLabels, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      string.reference,
      jni.JValueInt(i2)
    ]).check();
  }

  static final _id_deletePageLabels = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"deletePageLabels", r"(I)V");

  /// from: public native void deletePageLabels(int i)
  void deletePageLabels(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deletePageLabels,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_formatURIFromPathAndNamedDest = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"formatURIFromPathAndNamedDest",
          r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static protected native java.lang.String formatURIFromPathAndNamedDest(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString formatURIFromPathAndNamedDest(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_formatURIFromPathAndNamedDest,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_formatURIFromPathAndExplicitDest = jni.Jni.accessors
      .getStaticMethodIDOf(
          _class.reference,
          r"formatURIFromPathAndExplicitDest",
          r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/LinkDestination;)Ljava/lang/String;");

  /// from: static protected native java.lang.String formatURIFromPathAndExplicitDest(java.lang.String string, com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString formatURIFromPathAndExplicitDest(
    jni.JString string,
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_formatURIFromPathAndExplicitDest,
            jni.JniCallType.objectType,
            [string.reference, linkDestination.reference]).object);
  }

  static final _id_appendNamedDestToURI = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"appendNamedDestToURI",
      r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static protected native java.lang.String appendNamedDestToURI(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString appendNamedDestToURI(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_appendNamedDestToURI,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_appendExplicitDestToURI = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"appendExplicitDestToURI",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/LinkDestination;)Ljava/lang/String;");

  /// from: static protected native java.lang.String appendExplicitDestToURI(java.lang.String string, com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString appendExplicitDestToURI(
    jni.JString string,
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_appendExplicitDestToURI,
            jni.JniCallType.objectType,
            [string.reference, linkDestination.reference]).object);
  }

  static final _id_formatURIFromPathAndDest = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"formatURIFromPathAndDest",
          r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String formatURIFromPathAndDest(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString formatURIFromPathAndDest(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_formatURIFromPathAndDest,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_formatURIFromPathAndDest1 = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"formatURIFromPathAndDest",
          r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/LinkDestination;)Ljava/lang/String;");

  /// from: static public java.lang.String formatURIFromPathAndDest(java.lang.String string, com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString formatURIFromPathAndDest1(
    jni.JString string,
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_formatURIFromPathAndDest1,
            jni.JniCallType.objectType,
            [string.reference, linkDestination.reference]).object);
  }

  static final _id_appendDestToURI = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"appendDestToURI",
      r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: static public java.lang.String appendDestToURI(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString appendDestToURI(
    jni.JString string,
    jni.JString string1,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_appendDestToURI,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_appendDestToURI1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"appendDestToURI",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/LinkDestination;)Ljava/lang/String;");

  /// from: static public java.lang.String appendDestToURI(java.lang.String string, com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString appendDestToURI1(
    jni.JString string,
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_appendDestToURI1,
            jni.JniCallType.objectType,
            [string.reference, linkDestination.reference]).object);
  }

  static final _id_countSignatures = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"countSignatures", r"()I");

  /// from: public native int countSignatures()
  int countSignatures() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_countSignatures, jni.JniCallType.intType, []).integer;
  }

  static final _id_addEmbeddedFile = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addEmbeddedFile",
      r"(Ljava/lang/String;Ljava/lang/String;Lcom/artifex/mupdf/fitz/Buffer;JJZ)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public native com.artifex.mupdf.fitz.PDFObject addEmbeddedFile(java.lang.String string, java.lang.String string1, com.artifex.mupdf.fitz.Buffer buffer, long j, long j1, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addEmbeddedFile(
    jni.JString string,
    jni.JString string1,
    buffer_.Buffer buffer,
    int j,
    int j1,
    bool z,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addEmbeddedFile, jni.JniCallType.objectType, [
      string.reference,
      string1.reference,
      buffer.reference,
      j,
      j1,
      z ? 1 : 0
    ]).object);
  }

  static final _id_getEmbeddedFileParams = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getEmbeddedFileParams",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)Lcom/artifex/mupdf/fitz/PDFDocument$PDFEmbeddedFileParams;");

  /// from: public native com.artifex.mupdf.fitz.PDFDocument$PDFEmbeddedFileParams getEmbeddedFileParams(com.artifex.mupdf.fitz.PDFObject pDFObject)
  /// The returned object must be released after use, by calling the [release] method.
  PDFDocument_PDFEmbeddedFileParams getEmbeddedFileParams(
    pdfobject_.PDFObject pDFObject,
  ) {
    return const $PDFDocument_PDFEmbeddedFileParamsType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_getEmbeddedFileParams,
            jni.JniCallType.objectType,
            [pDFObject.reference]).object);
  }

  static final _id_loadEmbeddedFileContents = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadEmbeddedFileContents",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)Lcom/artifex/mupdf/fitz/Buffer;");

  /// from: public native com.artifex.mupdf.fitz.Buffer loadEmbeddedFileContents(com.artifex.mupdf.fitz.PDFObject pDFObject)
  /// The returned object must be released after use, by calling the [release] method.
  buffer_.Buffer loadEmbeddedFileContents(
    pdfobject_.PDFObject pDFObject,
  ) {
    return const buffer_.$BufferType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_loadEmbeddedFileContents,
            jni.JniCallType.objectType, [pDFObject.reference]).object);
  }

  static final _id_verifyEmbeddedFileChecksum = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"verifyEmbeddedFileChecksum",
      r"(Lcom/artifex/mupdf/fitz/PDFObject;)Z");

  /// from: public native boolean verifyEmbeddedFileChecksum(com.artifex.mupdf.fitz.PDFObject pDFObject)
  bool verifyEmbeddedFileChecksum(
    pdfobject_.PDFObject pDFObject,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_verifyEmbeddedFileChecksum,
        jni.JniCallType.booleanType,
        [pDFObject.reference]).boolean;
  }

  static final _id_addEmbeddedFile1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addEmbeddedFile",
      r"(Ljava/lang/String;Ljava/lang/String;Ljava/io/InputStream;Ljava/util/Date;Ljava/util/Date;Z)Lcom/artifex/mupdf/fitz/PDFObject;");

  /// from: public com.artifex.mupdf.fitz.PDFObject addEmbeddedFile(java.lang.String string, java.lang.String string1, java.io.InputStream inputStream, java.util.Date date, java.util.Date date1, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pdfobject_.PDFObject addEmbeddedFile1(
    jni.JString string,
    jni.JString string1,
    jni.JObject inputStream,
    jni.JObject date,
    jni.JObject date1,
    bool z,
  ) {
    return const pdfobject_.$PDFObjectType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_addEmbeddedFile1, jni.JniCallType.objectType, [
      string.reference,
      string1.reference,
      inputStream.reference,
      date.reference,
      date1.reference,
      z ? 1 : 0
    ]).object);
  }
}

class $PDFDocumentType extends jni.JObjType<PDFDocument> {
  const $PDFDocumentType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PDFDocument;";

  @override
  PDFDocument fromRef(jni.JObjectPtr ref) => PDFDocument.fromRef(ref);

  @override
  jni.JObjType get superType => const document_.$DocumentType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDFDocumentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFDocumentType) && other is $PDFDocumentType;
  }
}

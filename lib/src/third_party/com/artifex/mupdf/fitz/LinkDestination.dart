// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Location.dart" as location_;

/// from: com.artifex.mupdf.fitz.LinkDestination
class LinkDestination extends location_.Location {
  @override
  late final jni.JObjType<LinkDestination> $type = type;

  LinkDestination.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/LinkDestination");

  /// The type which includes information such as the signature of this class.
  static const type = $LinkDestinationType();

  /// from: static public final int LINK_DEST_FIT
  static const LINK_DEST_FIT = 0;

  /// from: static public final int LINK_DEST_FIT_B
  static const LINK_DEST_FIT_B = 1;

  /// from: static public final int LINK_DEST_FIT_H
  static const LINK_DEST_FIT_H = 2;

  /// from: static public final int LINK_DEST_FIT_BH
  static const LINK_DEST_FIT_BH = 3;

  /// from: static public final int LINK_DEST_FIT_V
  static const LINK_DEST_FIT_V = 4;

  /// from: static public final int LINK_DEST_FIT_BV
  static const LINK_DEST_FIT_BV = 5;

  /// from: static public final int LINK_DEST_FIT_R
  static const LINK_DEST_FIT_R = 6;

  /// from: static public final int LINK_DEST_XYZ
  static const LINK_DEST_XYZ = 7;

  static final _id_x = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"x",
    r"F",
  );

  /// from: public float x
  double get x => jni.Jni.accessors
      .getField(reference, _id_x, jni.JniCallType.floatType)
      .float;

  /// from: public float x
  set x(double value) => jni.Jni.env.SetFloatField(reference, _id_x, value);

  static final _id_y = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"y",
    r"F",
  );

  /// from: public float y
  double get y => jni.Jni.accessors
      .getField(reference, _id_y, jni.JniCallType.floatType)
      .float;

  /// from: public float y
  set y(double value) => jni.Jni.env.SetFloatField(reference, _id_y, value);

  static final _id_width = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"width",
    r"F",
  );

  /// from: public float width
  double get width => jni.Jni.accessors
      .getField(reference, _id_width, jni.JniCallType.floatType)
      .float;

  /// from: public float width
  set width(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_width, value);

  static final _id_height = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"height",
    r"F",
  );

  /// from: public float height
  double get height => jni.Jni.accessors
      .getField(reference, _id_height, jni.JniCallType.floatType)
      .float;

  /// from: public float height
  set height(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_height, value);

  static final _id_zoom = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"zoom",
    r"F",
  );

  /// from: public float zoom
  double get zoom => jni.Jni.accessors
      .getField(reference, _id_zoom, jni.JniCallType.floatType)
      .float;

  /// from: public float zoom
  set zoom(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_zoom, value);

  static final _id_new1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(IIIFFFFF)V");

  /// from: public void <init>(int i, int i1, int i2, float f, float f1, float f2, float f3, float f4)
  /// The returned object must be released after use, by calling the [release] method.
  factory LinkDestination.new1(
    int i,
    int i1,
    int i2,
    double f,
    double f1,
    double f2,
    double f3,
    double f4,
  ) {
    return LinkDestination.fromRef(
        jni.Jni.accessors.newObjectWithArgs(_class.reference, _id_new1, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3),
      jni.JValueFloat(f4)
    ]).object);
  }

  static final _id_Fit = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"Fit", r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination Fit(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination Fit(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_Fit,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_FitB = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitB",
      r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitB(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitB(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitB,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_XYZ = jni.Jni.accessors.getStaticMethodIDOf(_class.reference,
      r"XYZ", r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination XYZ(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination XYZ(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_XYZ,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_XYZ1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"XYZ",
      r"(IIF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination XYZ(int i, int i1, float f)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination XYZ1(
    int i,
    int i1,
    double f,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_XYZ1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueFloat(f)]).object);
  }

  static final _id_XYZ2 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"XYZ",
      r"(IIFF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination XYZ(int i, int i1, float f, float f1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination XYZ2(
    int i,
    int i1,
    double f,
    double f1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_XYZ2, jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueFloat(f),
      jni.JValueFloat(f1)
    ]).object);
  }

  static final _id_XYZ3 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"XYZ",
      r"(IIFFF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination XYZ(int i, int i1, float f, float f1, float f2)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination XYZ3(
    int i,
    int i1,
    double f,
    double f1,
    double f2,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_XYZ3, jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2)
    ]).object);
  }

  static final _id_FitH = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitH",
      r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitH(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitH(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitH,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_FitH1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitH",
      r"(IIF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitH(int i, int i1, float f)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitH1(
    int i,
    int i1,
    double f,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitH1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueFloat(f)]).object);
  }

  static final _id_FitBH = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitBH",
      r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitBH(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitBH(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitBH,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_FitBH1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitBH",
      r"(IIF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitBH(int i, int i1, float f)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitBH1(
    int i,
    int i1,
    double f,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitBH1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueFloat(f)]).object);
  }

  static final _id_FitV = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitV",
      r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitV(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitV(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitV,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_FitV1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitV",
      r"(IIF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitV(int i, int i1, float f)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitV1(
    int i,
    int i1,
    double f,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitV1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueFloat(f)]).object);
  }

  static final _id_FitBV = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitBV",
      r"(II)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitBV(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitBV(
    int i,
    int i1,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitBV,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_FitBV1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitBV",
      r"(IIF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitBV(int i, int i1, float f)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitBV1(
    int i,
    int i1,
    double f,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_FitBV1,
            jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), jni.JValueFloat(f)]).object);
  }

  static final _id_FitR = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"FitR",
      r"(IIFFFF)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: static public com.artifex.mupdf.fitz.LinkDestination FitR(int i, int i1, float f, float f1, float f2, float f3)
  /// The returned object must be released after use, by calling the [release] method.
  static LinkDestination FitR(
    int i,
    int i1,
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return const $LinkDestinationType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_FitR, jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3)
    ]).object);
  }

  static final _id_hasX =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasX", r"()Z");

  /// from: public boolean hasX()
  bool hasX() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasX, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasY =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasY", r"()Z");

  /// from: public boolean hasY()
  bool hasY() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasY, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasZoom =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasZoom", r"()Z");

  /// from: public boolean hasZoom()
  bool hasZoom() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasZoom, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasWidth =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasWidth", r"()Z");

  /// from: public boolean hasWidth()
  bool hasWidth() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasWidth, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_hasHeight =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hasHeight", r"()Z");

  /// from: public boolean hasHeight()
  bool hasHeight() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hasHeight, jni.JniCallType.booleanType, []).boolean;
  }
}

class $LinkDestinationType extends jni.JObjType<LinkDestination> {
  const $LinkDestinationType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/LinkDestination;";

  @override
  LinkDestination fromRef(jni.JObjectPtr ref) => LinkDestination.fromRef(ref);

  @override
  jni.JObjType get superType => const location_.$LocationType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($LinkDestinationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LinkDestinationType) &&
        other is $LinkDestinationType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "PKCS7DistinguishedName.dart" as pkcs7distinguishedname_;

import "FitzInputStream.dart" as fitzinputstream_;

/// from: com.artifex.mupdf.fitz.PKCS7Signer
class PKCS7Signer extends jni.JObject {
  @override
  late final jni.JObjType<PKCS7Signer> $type = type;

  PKCS7Signer.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PKCS7Signer");

  /// The type which includes information such as the signature of this class.
  static const type = $PKCS7SignerType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: protected void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PKCS7Signer() {
    return PKCS7Signer.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_name = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"name", r"()Lcom/artifex/mupdf/fitz/PKCS7DistinguishedName;");

  /// from: public abstract com.artifex.mupdf.fitz.PKCS7DistinguishedName name()
  /// The returned object must be deleted after use, by calling the `delete` method.
  pkcs7distinguishedname_.PKCS7DistinguishedName name() {
    return const pkcs7distinguishedname_.$PKCS7DistinguishedNameType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference, _id_name, jni.JniCallType.objectType, []).object);
  }

  static final _id_sign = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"sign", r"(Lcom/artifex/mupdf/fitz/FitzInputStream;)[B");

  /// from: public abstract byte[] sign(com.artifex.mupdf.fitz.FitzInputStream fitzInputStream)
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.jbyte> sign(
    fitzinputstream_.FitzInputStream fitzInputStream,
  ) {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_sign, jni.JniCallType.objectType,
            [fitzInputStream.reference]).object);
  }

  static final _id_maxDigest =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"maxDigest", r"()I");

  /// from: public abstract int maxDigest()
  int maxDigest() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_maxDigest, jni.JniCallType.intType, []).integer;
  }
}

class $PKCS7SignerType extends jni.JObjType<PKCS7Signer> {
  const $PKCS7SignerType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PKCS7Signer;";

  @override
  PKCS7Signer fromRef(jni.JObjectPtr ref) => PKCS7Signer.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PKCS7SignerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PKCS7SignerType) && other is $PKCS7SignerType;
  }
}

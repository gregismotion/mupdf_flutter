// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Buffer.dart" as buffer_;

/// from: com.artifex.mupdf.fitz.BufferInputStream
class BufferInputStream extends jni.JObject {
  @override
  late final jni.JObjType<BufferInputStream> $type = type;

  BufferInputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/BufferInputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $BufferInputStreamType();
  static final _id_buffer = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"buffer",
    r"Lcom/artifex/mupdf/fitz/Buffer;",
  );

  /// from: protected com.artifex.mupdf.fitz.Buffer buffer
  /// The returned object must be deleted after use, by calling the `delete` method.
  buffer_.Buffer get buffer =>
      const buffer_.$BufferType().fromRef(jni.Jni.accessors
          .getField(reference, _id_buffer, jni.JniCallType.objectType)
          .object);

  /// from: protected com.artifex.mupdf.fitz.Buffer buffer
  /// The returned object must be deleted after use, by calling the `delete` method.
  set buffer(buffer_.Buffer value) =>
      jni.Jni.env.SetObjectField(reference, _id_buffer, value.reference);

  static final _id_position = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"position",
    r"I",
  );

  /// from: protected int position
  int get position => jni.Jni.accessors
      .getField(reference, _id_position, jni.JniCallType.intType)
      .integer;

  /// from: protected int position
  set position(int value) =>
      jni.Jni.env.SetIntField(reference, _id_position, value);

  static final _id_resetPosition = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"resetPosition",
    r"I",
  );

  /// from: protected int resetPosition
  int get resetPosition => jni.Jni.accessors
      .getField(reference, _id_resetPosition, jni.JniCallType.intType)
      .integer;

  /// from: protected int resetPosition
  set resetPosition(int value) =>
      jni.Jni.env.SetIntField(reference, _id_resetPosition, value);

  static final _id_ctor = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Buffer buffer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory BufferInputStream(
    buffer_.Buffer buffer,
  ) {
    return BufferInputStream.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor, [buffer.reference]).object);
  }

  static final _id_available =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"available", r"()I");

  /// from: public int available()
  int available() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_available, jni.JniCallType.intType, []).integer;
  }

  static final _id_mark =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"mark", r"(I)V");

  /// from: public void mark(int i)
  void mark(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_mark,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_markSupported = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"markSupported", r"()Z");

  /// from: public boolean markSupported()
  bool markSupported() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_markSupported, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_read =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"read", r"()I");

  /// from: public int read()
  int read() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_read, jni.JniCallType.intType, []).integer;
  }

  static final _id_read1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"read", r"([B)I");

  /// from: public int read(byte[] bs)
  int read1(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_read1, jni.JniCallType.intType, [bs.reference]).integer;
  }

  static final _id_read2 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"read", r"([BII)I");

  /// from: public int read(byte[] bs, int i, int i1)
  int read2(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_read2,
        jni.JniCallType.intType,
        [bs.reference, jni.JValueInt(i), jni.JValueInt(i1)]).integer;
  }

  static final _id_reset =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"reset", r"()V");

  /// from: public void reset()
  void reset() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_reset, jni.JniCallType.voidType, []).check();
  }
}

class $BufferInputStreamType extends jni.JObjType<BufferInputStream> {
  const $BufferInputStreamType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/BufferInputStream;";

  @override
  BufferInputStream fromRef(jni.JObjectPtr ref) =>
      BufferInputStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BufferInputStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BufferInputStreamType) &&
        other is $BufferInputStreamType;
  }
}

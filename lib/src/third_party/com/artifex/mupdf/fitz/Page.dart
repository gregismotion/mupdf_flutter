// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Rect.dart" as rect_;

import "Device.dart" as device_;

import "Matrix.dart" as matrix_;

import "Cookie.dart" as cookie_;

import "Link.dart" as link_;

import "ColorSpace.dart" as colorspace_;

import "Pixmap.dart" as pixmap_;

import "DisplayList.dart" as displaylist_;

import "StructuredText.dart" as structuredtext_;

import "Quad.dart" as quad_;

import "Document.dart" as document_;

import "LinkDestination.dart" as linkdestination_;

/// from: com.artifex.mupdf.fitz.Page
class Page extends jni.JObject {
  @override
  late final jni.JObjType<Page> $type = type;

  Page.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Page");

  /// The type which includes information such as the signature of this class.
  static const type = $PageType();

  /// from: static public final int MEDIA_BOX
  static const MEDIA_BOX = 0;

  /// from: static public final int CROP_BOX
  static const CROP_BOX = 1;

  /// from: static public final int BLEED_BOX
  static const BLEED_BOX = 2;

  /// from: static public final int TRIM_BOX
  static const TRIM_BOX = 3;

  /// from: static public final int ART_BOX
  static const ART_BOX = 4;

  /// from: static public final int UNKNOWN_BOX
  static const UNKNOWN_BOX = 5;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory Page(
    int j,
  ) {
    return Page.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [j]).object);
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBounds", r"(I)Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public com.artifex.mupdf.fitz.Rect getBounds(int i)
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBounds(
    int i,
  ) {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBounds,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_getBounds1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBounds", r"()Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public com.artifex.mupdf.fitz.Rect getBounds()
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBounds1() {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBounds1, jni.JniCallType.objectType, []).object);
  }

  static final _id_run = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"run",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void run(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void run(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_run,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }

  static final _id_runPageContents = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"runPageContents",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void runPageContents(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void runPageContents(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_runPageContents,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }

  static final _id_runPageAnnots = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"runPageAnnots",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void runPageAnnots(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void runPageAnnots(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_runPageAnnots,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }

  static final _id_runPageWidgets = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"runPageWidgets",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Cookie;)V");

  /// from: public native void runPageWidgets(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Cookie cookie)
  void runPageWidgets(
    device_.Device device,
    matrix_.Matrix matrix,
    cookie_.Cookie cookie,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_runPageWidgets,
        jni.JniCallType.voidType,
        [device.reference, matrix.reference, cookie.reference]).check();
  }

  static final _id_run1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"run",
      r"(Lcom/artifex/mupdf/fitz/Device;Lcom/artifex/mupdf/fitz/Matrix;)V");

  /// from: public void run(com.artifex.mupdf.fitz.Device device, com.artifex.mupdf.fitz.Matrix matrix)
  void run1(
    device_.Device device,
    matrix_.Matrix matrix,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_run1,
        jni.JniCallType.voidType, [device.reference, matrix.reference]).check();
  }

  static final _id_getLinks = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getLinks", r"()[Lcom/artifex/mupdf/fitz/Link;");

  /// from: public native com.artifex.mupdf.fitz.Link[] getLinks()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<link_.Link> getLinks() {
    return const jni.JArrayType(link_.$LinkType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getLinks, jni.JniCallType.objectType, []).object);
  }

  static final _id_toPixmap = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toPixmap",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/ColorSpace;ZZ)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public native com.artifex.mupdf.fitz.Pixmap toPixmap(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.ColorSpace colorSpace, boolean z, boolean z1)
  /// The returned object must be released after use, by calling the [release] method.
  pixmap_.Pixmap toPixmap(
    matrix_.Matrix matrix,
    colorspace_.ColorSpace colorSpace,
    bool z,
    bool z1,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_toPixmap, jni.JniCallType.objectType, [
      matrix.reference,
      colorSpace.reference,
      z ? 1 : 0,
      z1 ? 1 : 0
    ]).object);
  }

  static final _id_toPixmap1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toPixmap",
      r"(Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/ColorSpace;Z)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public com.artifex.mupdf.fitz.Pixmap toPixmap(com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.ColorSpace colorSpace, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  pixmap_.Pixmap toPixmap1(
    matrix_.Matrix matrix,
    colorspace_.ColorSpace colorSpace,
    bool z,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_toPixmap1,
            jni.JniCallType.objectType,
            [matrix.reference, colorSpace.reference, z ? 1 : 0]).object);
  }

  static final _id_toDisplayList = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toDisplayList",
      r"(Z)Lcom/artifex/mupdf/fitz/DisplayList;");

  /// from: public native com.artifex.mupdf.fitz.DisplayList toDisplayList(boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  displaylist_.DisplayList toDisplayList(
    bool z,
  ) {
    return const displaylist_.$DisplayListType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toDisplayList,
            jni.JniCallType.objectType, [z ? 1 : 0]).object);
  }

  static final _id_toDisplayList1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toDisplayList",
      r"()Lcom/artifex/mupdf/fitz/DisplayList;");

  /// from: public com.artifex.mupdf.fitz.DisplayList toDisplayList()
  /// The returned object must be released after use, by calling the [release] method.
  displaylist_.DisplayList toDisplayList1() {
    return const displaylist_.$DisplayListType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toDisplayList1,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_toStructuredText = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toStructuredText",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/StructuredText;");

  /// from: public native com.artifex.mupdf.fitz.StructuredText toStructuredText(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  structuredtext_.StructuredText toStructuredText(
    jni.JString string,
  ) {
    return const structuredtext_.$StructuredTextType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toStructuredText,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_toStructuredText1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"toStructuredText",
      r"()Lcom/artifex/mupdf/fitz/StructuredText;");

  /// from: public com.artifex.mupdf.fitz.StructuredText toStructuredText()
  /// The returned object must be released after use, by calling the [release] method.
  structuredtext_.StructuredText toStructuredText1() {
    return const structuredtext_.$StructuredTextType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_toStructuredText1,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_search = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"search", r"(Ljava/lang/String;)[[Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public native com.artifex.mupdf.fitz.Quad[][] search(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<quad_.Quad> search(
    jni.JString string,
  ) {
    return const jni.JArrayType(quad_.$QuadType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_search, jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_textAsHtml =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"textAsHtml", r"()[B");

  /// from: public native byte[] textAsHtml()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> textAsHtml() {
    return const jni.JArrayType(jni.jbyteType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_textAsHtml, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDocument = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getDocument", r"()Lcom/artifex/mupdf/fitz/Document;");

  /// from: public native com.artifex.mupdf.fitz.Document getDocument()
  /// The returned object must be released after use, by calling the [release] method.
  document_.Document getDocument() {
    return const document_.$DocumentType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getDocument, jni.JniCallType.objectType, []).object);
  }

  static final _id_createLink = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLink",
      r"(Lcom/artifex/mupdf/fitz/Rect;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public native com.artifex.mupdf.fitz.Link createLink(com.artifex.mupdf.fitz.Rect rect, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  link_.Link createLink(
    rect_.Rect rect,
    jni.JString string,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLink,
        jni.JniCallType.objectType,
        [rect.reference, string.reference]).object);
  }

  static final _id_createLink1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLink",
      r"(Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/LinkDestination;)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLink(com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  link_.Link createLink1(
    rect_.Rect rect,
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLink1,
        jni.JniCallType.objectType,
        [rect.reference, linkDestination.reference]).object);
  }

  static final _id_deleteLink = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"deleteLink", r"(Lcom/artifex/mupdf/fitz/Link;)V");

  /// from: public native void deleteLink(com.artifex.mupdf.fitz.Link link)
  void deleteLink(
    link_.Link link,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteLink,
        jni.JniCallType.voidType, [link.reference]).check();
  }

  static final _id_getLabel = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLabel", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getLabel()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLabel() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLabel, jni.JniCallType.objectType, []).object);
  }
}

class $PageType extends jni.JObjType<Page> {
  const $PageType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Page;";

  @override
  Page fromRef(jni.JObjectPtr ref) => Page.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PageType) && other is $PageType;
  }
}

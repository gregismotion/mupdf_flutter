// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Pixmap.dart" as pixmap_;

import "Buffer.dart" as buffer_;

import "ColorSpace.dart" as colorspace_;

/// from: com.artifex.mupdf.fitz.Image
class Image extends jni.JObject {
  @override
  late final jni.JObjType<Image> $type = type;

  Image.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Image");

  /// The type which includes information such as the signature of this class.
  static const type = $ImageType();
  static final _id_pointer = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"pointer",
    r"J",
  );

  /// from: protected long pointer
  int get pointer => jni.Jni.accessors
      .getField(reference, _id_pointer, jni.JniCallType.longType)
      .long;

  /// from: protected long pointer
  set pointer(int value) =>
      jni.Jni.env.SetLongField(reference, _id_pointer, value);

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory Image(
    int j,
  ) {
    return Image.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [j]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Pixmap;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Pixmap pixmap)
  /// The returned object must be released after use, by calling the [release] method.
  factory Image.new1(
    pixmap_.Pixmap pixmap,
  ) {
    return Image.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [pixmap.reference]).object);
  }

  static final _id_new2 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Image.new2(
    jni.JString string,
  ) {
    return Image.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [string.reference]).object);
  }

  static final _id_new3 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"([B)V");

  /// from: public void <init>(byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  factory Image.new3(
    jni.JArray<jni.jbyte> bs,
  ) {
    return Image.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new3, [bs.reference]).object);
  }

  static final _id_new4 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Buffer buffer)
  /// The returned object must be released after use, by calling the [release] method.
  factory Image.new4(
    buffer_.Buffer buffer,
  ) {
    return Image.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new4, [buffer.reference]).object);
  }

  static final _id_getWidth =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getWidth", r"()I");

  /// from: public native int getWidth()
  int getWidth() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getWidth, jni.JniCallType.intType, []).integer;
  }

  static final _id_getHeight =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getHeight", r"()I");

  /// from: public native int getHeight()
  int getHeight() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getHeight, jni.JniCallType.intType, []).integer;
  }

  static final _id_getXResolution = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getXResolution", r"()I");

  /// from: public native int getXResolution()
  int getXResolution() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getXResolution, jni.JniCallType.intType, []).integer;
  }

  static final _id_getYResolution = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getYResolution", r"()I");

  /// from: public native int getYResolution()
  int getYResolution() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getYResolution, jni.JniCallType.intType, []).integer;
  }

  static final _id_getColorSpace = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getColorSpace",
      r"()Lcom/artifex/mupdf/fitz/ColorSpace;");

  /// from: public native com.artifex.mupdf.fitz.ColorSpace getColorSpace()
  /// The returned object must be released after use, by calling the [release] method.
  colorspace_.ColorSpace getColorSpace() {
    return const colorspace_.$ColorSpaceType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getColorSpace,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getNumberOfComponents = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getNumberOfComponents", r"()I");

  /// from: public native int getNumberOfComponents()
  int getNumberOfComponents() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getNumberOfComponents, jni.JniCallType.intType, []).integer;
  }

  static final _id_getBitsPerComponent = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getBitsPerComponent", r"()I");

  /// from: public native int getBitsPerComponent()
  int getBitsPerComponent() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_getBitsPerComponent, jni.JniCallType.intType, []).integer;
  }

  static final _id_getImageMask = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getImageMask", r"()Z");

  /// from: public native boolean getImageMask()
  bool getImageMask() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getImageMask, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getInterpolate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getInterpolate", r"()Z");

  /// from: public native boolean getInterpolate()
  bool getInterpolate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getInterpolate, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getColorKey = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getColorKey", r"()[I");

  /// from: public native int[] getColorKey()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getColorKey() {
    return const jni.JArrayType(jni.jintType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getColorKey, jni.JniCallType.objectType, []).object);
  }

  static final _id_getDecode =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getDecode", r"()[F");

  /// from: public native float[] getDecode()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getDecode() {
    return const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getDecode, jni.JniCallType.objectType, []).object);
  }

  static final _id_getOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOrientation", r"()I");

  /// from: public native int getOrientation()
  int getOrientation() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getOrientation, jni.JniCallType.intType, []).integer;
  }

  static final _id_getMask = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getMask", r"()Lcom/artifex/mupdf/fitz/Image;");

  /// from: public native com.artifex.mupdf.fitz.Image getMask()
  /// The returned object must be released after use, by calling the [release] method.
  Image getMask() {
    return const $ImageType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMask, jni.JniCallType.objectType, []).object);
  }

  static final _id_setOrientation = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setOrientation", r"(I)V");

  /// from: public native void setOrientation(int i)
  void setOrientation(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setOrientation,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_toPixmap = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"toPixmap", r"()Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public native com.artifex.mupdf.fitz.Pixmap toPixmap()
  /// The returned object must be released after use, by calling the [release] method.
  pixmap_.Pixmap toPixmap() {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_toPixmap, jni.JniCallType.objectType, []).object);
  }
}

class $ImageType extends jni.JObjType<Image> {
  const $ImageType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Image;";

  @override
  Image fromRef(jni.JObjectPtr ref) => Image.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ImageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ImageType) && other is $ImageType;
  }
}

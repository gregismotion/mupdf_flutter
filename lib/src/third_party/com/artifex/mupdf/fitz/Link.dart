// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Rect.dart" as rect_;

/// from: com.artifex.mupdf.fitz.Link
class Link extends jni.JObject {
  @override
  late final jni.JObjType<Link> $type = type;

  Link.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Link");

  /// The type which includes information such as the signature of this class.
  static const type = $LinkType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Link(
    int j,
  ) {
    return Link.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, [j]).object);
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getBounds", r"()Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public native com.artifex.mupdf.fitz.Rect getBounds()
  /// The returned object must be deleted after use, by calling the `delete` method.
  rect_.Rect getBounds() {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getBounds, jni.JniCallType.objectType, []).object);
  }

  static final _id_setBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setBounds", r"(Lcom/artifex/mupdf/fitz/Rect;)V");

  /// from: public native void setBounds(com.artifex.mupdf.fitz.Rect rect)
  void setBounds(
    rect_.Rect rect,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setBounds,
        jni.JniCallType.voidType, [rect.reference]).check();
  }

  static final _id_getURI = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getURI", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getURI()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getURI() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getURI, jni.JniCallType.objectType, []).object);
  }

  static final _id_setURI = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setURI", r"(Ljava/lang/String;)V");

  /// from: public native void setURI(java.lang.String string)
  void setURI(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setURI,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_isExternal =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isExternal", r"()Z");

  /// from: public boolean isExternal()
  bool isExternal() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isExternal, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

class $LinkType extends jni.JObjType<Link> {
  const $LinkType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Link;";

  @override
  Link fromRef(jni.JObjectPtr ref) => Link.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LinkType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LinkType) && other is $LinkType;
  }
}

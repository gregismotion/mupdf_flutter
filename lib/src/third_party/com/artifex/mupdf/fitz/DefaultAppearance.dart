// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.DefaultAppearance
class DefaultAppearance extends jni.JObject {
  @override
  late final jni.JObjType<DefaultAppearance> $type = type;

  DefaultAppearance.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/DefaultAppearance");

  /// The type which includes information such as the signature of this class.
  static const type = $DefaultAppearanceType();
  static final _id_font = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"font",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String font
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get font => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_font, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String font
  /// The returned object must be released after use, by calling the [release] method.
  set font(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_font, value.reference);

  static final _id_size = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"size",
    r"F",
  );

  /// from: public float size
  double get size => jni.Jni.accessors
      .getField(reference, _id_size, jni.JniCallType.floatType)
      .float;

  /// from: public float size
  set size(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_size, value);

  static final _id_color = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"color",
    r"[F",
  );

  /// from: public float[] color
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> get color =>
      const jni.JArrayType(jni.jfloatType()).fromRef(jni.Jni.accessors
          .getField(reference, _id_color, jni.JniCallType.objectType)
          .object);

  /// from: public float[] color
  /// The returned object must be released after use, by calling the [release] method.
  set color(jni.JArray<jni.jfloat> value) =>
      jni.Jni.env.SetObjectField(reference, _id_color, value.reference);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory DefaultAppearance() {
    return DefaultAppearance.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }
}

class $DefaultAppearanceType extends jni.JObjType<DefaultAppearance> {
  const $DefaultAppearanceType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/DefaultAppearance;";

  @override
  DefaultAppearance fromRef(jni.JObjectPtr ref) =>
      DefaultAppearance.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DefaultAppearanceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DefaultAppearanceType) &&
        other is $DefaultAppearanceType;
  }
}

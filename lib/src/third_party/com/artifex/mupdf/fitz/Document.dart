// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "SeekableInputStream.dart" as seekableinputstream_;

import "SeekableOutputStream.dart" as seekableoutputstream_;

import "Page.dart" as page_;

import "Location.dart" as location_;

import "Quad.dart" as quad_;

import "Outline.dart" as outline_;

import "Link.dart" as link_;

import "LinkDestination.dart" as linkdestination_;

import "OutlineIterator.dart" as outlineiterator_;

/// from: com.artifex.mupdf.fitz.Document
class Document extends jni.JObject {
  @override
  late final jni.JObjType<Document> $type = type;

  Document.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Document");

  /// The type which includes information such as the signature of this class.
  static const type = $DocumentType();

  /// from: static public final java.lang.String META_FORMAT
  static const META_FORMAT = r"""format""";

  /// from: static public final java.lang.String META_ENCRYPTION
  static const META_ENCRYPTION = r"""encryption""";

  /// from: static public final java.lang.String META_INFO_AUTHOR
  static const META_INFO_AUTHOR = r"""info:Author""";

  /// from: static public final java.lang.String META_INFO_TITLE
  static const META_INFO_TITLE = r"""info:Title""";

  /// from: static public final java.lang.String META_INFO_SUBJECT
  static const META_INFO_SUBJECT = r"""info:Subject""";

  /// from: static public final java.lang.String META_INFO_KEYWORDS
  static const META_INFO_KEYWORDS = r"""info:Keywords""";

  /// from: static public final java.lang.String META_INFO_CREATOR
  static const META_INFO_CREATOR = r"""info:Creator""";

  /// from: static public final java.lang.String META_INFO_PRODUCER
  static const META_INFO_PRODUCER = r"""info:Producer""";

  /// from: static public final java.lang.String META_INFO_CREATIONDATE
  static const META_INFO_CREATIONDATE = r"""info:CreationDate""";

  /// from: static public final java.lang.String META_INFO_MODIFICATIONDATE
  static const META_INFO_MODIFICATIONDATE = r"""info:ModDate""";

  static final _id_pointer = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"pointer",
    r"J",
  );

  /// from: protected long pointer
  int get pointer => jni.Jni.accessors
      .getField(reference, _id_pointer, jni.JniCallType.longType)
      .long;

  /// from: protected long pointer
  set pointer(int value) =>
      jni.Jni.env.SetLongField(reference, _id_pointer, value);

  /// from: static public final int PERMISSION_PRINT
  static const PERMISSION_PRINT = 112;

  /// from: static public final int PERMISSION_COPY
  static const PERMISSION_COPY = 99;

  /// from: static public final int PERMISSION_EDIT
  static const PERMISSION_EDIT = 101;

  /// from: static public final int PERMISSION_ANNOTATE
  static const PERMISSION_ANNOTATE = 110;

  /// from: static public final int PERMISSION_FORM
  static const PERMISSION_FORM = 102;

  /// from: static public final int PERMISSION_ACCESSBILITY
  static const PERMISSION_ACCESSBILITY = 121;

  /// from: static public final int PERMISSION_ASSEMBLE
  static const PERMISSION_ASSEMBLE = 97;

  /// from: static public final int PERMISSION_PRINT_HQ
  static const PERMISSION_PRINT_HQ = 104;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory Document(
    int j,
  ) {
    return Document.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, [j]).object);
  }

  static final _id_openNativeWithPath = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openNativeWithPath",
      r"(Ljava/lang/String;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static protected native com.artifex.mupdf.fitz.Document openNativeWithPath(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openNativeWithPath(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openNativeWithPath,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_openNativeWithBuffer = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openNativeWithBuffer",
      r"(Ljava/lang/String;[B[B)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static protected native com.artifex.mupdf.fitz.Document openNativeWithBuffer(java.lang.String string, byte[] bs, byte[] bs1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openNativeWithBuffer(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
    jni.JArray<jni.jbyte> bs1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openNativeWithBuffer,
            jni.JniCallType.objectType,
            [string.reference, bs.reference, bs1.reference]).object);
  }

  static final _id_openNativeWithStream = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openNativeWithStream",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/SeekableInputStream;Lcom/artifex/mupdf/fitz/SeekableInputStream;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static protected native com.artifex.mupdf.fitz.Document openNativeWithStream(java.lang.String string, com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream, com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openNativeWithStream(
    jni.JString string,
    seekableinputstream_.SeekableInputStream seekableInputStream,
    seekableinputstream_.SeekableInputStream seekableInputStream1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_openNativeWithStream,
            jni.JniCallType.objectType, [
      string.reference,
      seekableInputStream.reference,
      seekableInputStream1.reference
    ]).object);
  }

  static final _id_openNativeWithPathAndStream = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"openNativeWithPathAndStream",
          r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/SeekableInputStream;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static protected native com.artifex.mupdf.fitz.Document openNativeWithPathAndStream(java.lang.String string, com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openNativeWithPathAndStream(
    jni.JString string,
    seekableinputstream_.SeekableInputStream seekableInputStream,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openNativeWithPathAndStream,
            jni.JniCallType.objectType,
            [string.reference, seekableInputStream.reference]).object);
  }

  static final _id_openDocument = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument(
    jni.JString string,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_openDocument,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_openDocument1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"(Ljava/lang/String;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument1(
    jni.JString string,
    jni.JString string1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openDocument1,
            jni.JniCallType.objectType,
            [string.reference, string1.reference]).object);
  }

  static final _id_openDocument2 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"(Ljava/lang/String;Lcom/artifex/mupdf/fitz/SeekableInputStream;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(java.lang.String string, com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument2(
    jni.JString string,
    seekableinputstream_.SeekableInputStream seekableInputStream,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openDocument2,
            jni.JniCallType.objectType,
            [string.reference, seekableInputStream.reference]).object);
  }

  static final _id_openDocument3 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"([BLjava/lang/String;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(byte[] bs, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument3(
    jni.JArray<jni.jbyte> bs,
    jni.JString string,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openDocument3,
            jni.JniCallType.objectType,
            [bs.reference, string.reference]).object);
  }

  static final _id_openDocument4 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"([BLjava/lang/String;[B)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(byte[] bs, java.lang.String string, byte[] bs1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument4(
    jni.JArray<jni.jbyte> bs,
    jni.JString string,
    jni.JArray<jni.jbyte> bs1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openDocument4,
            jni.JniCallType.objectType,
            [bs.reference, string.reference, bs1.reference]).object);
  }

  static final _id_openDocument5 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"(Lcom/artifex/mupdf/fitz/SeekableInputStream;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument5(
    seekableinputstream_.SeekableInputStream seekableInputStream,
    jni.JString string,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference,
            _id_openDocument5,
            jni.JniCallType.objectType,
            [seekableInputStream.reference, string.reference]).object);
  }

  static final _id_openDocument6 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"openDocument",
      r"(Lcom/artifex/mupdf/fitz/SeekableInputStream;Ljava/lang/String;Lcom/artifex/mupdf/fitz/SeekableInputStream;)Lcom/artifex/mupdf/fitz/Document;");

  /// from: static public com.artifex.mupdf.fitz.Document openDocument(com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream, java.lang.String string, com.artifex.mupdf.fitz.SeekableInputStream seekableInputStream1)
  /// The returned object must be released after use, by calling the [release] method.
  static Document openDocument6(
    seekableinputstream_.SeekableInputStream seekableInputStream,
    jni.JString string,
    seekableinputstream_.SeekableInputStream seekableInputStream1,
  ) {
    return const $DocumentType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(
            _class.reference, _id_openDocument6, jni.JniCallType.objectType, [
      seekableInputStream.reference,
      string.reference,
      seekableInputStream1.reference
    ]).object);
  }

  static final _id_recognize = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"recognize", r"(Ljava/lang/String;)Z");

  /// from: static public native boolean recognize(java.lang.String string)
  static bool recognize(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_recognize, jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_supportsAccelerator = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"supportsAccelerator", r"()Z");

  /// from: public native boolean supportsAccelerator()
  bool supportsAccelerator() {
    return jni.Jni.accessors.callMethodWithArgs(reference,
        _id_supportsAccelerator, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_saveAccelerator = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"saveAccelerator", r"(Ljava/lang/String;)V");

  /// from: public native void saveAccelerator(java.lang.String string)
  void saveAccelerator(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_saveAccelerator,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_outputAccelerator = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"outputAccelerator",
      r"(Lcom/artifex/mupdf/fitz/SeekableOutputStream;)V");

  /// from: public native void outputAccelerator(com.artifex.mupdf.fitz.SeekableOutputStream seekableOutputStream)
  void outputAccelerator(
    seekableoutputstream_.SeekableOutputStream seekableOutputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_outputAccelerator,
        jni.JniCallType.voidType,
        [seekableOutputStream.reference]).check();
  }

  static final _id_needsPassword = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"needsPassword", r"()Z");

  /// from: public native boolean needsPassword()
  bool needsPassword() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_needsPassword, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_authenticatePassword = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"authenticatePassword", r"(Ljava/lang/String;)Z");

  /// from: public native boolean authenticatePassword(java.lang.String string)
  bool authenticatePassword(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_authenticatePassword,
        jni.JniCallType.booleanType,
        [string.reference]).boolean;
  }

  static final _id_countChapters = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"countChapters", r"()I");

  /// from: public native int countChapters()
  int countChapters() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_countChapters, jni.JniCallType.intType, []).integer;
  }

  static final _id_countPages =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"countPages", r"(I)I");

  /// from: public native int countPages(int i)
  int countPages(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_countPages,
        jni.JniCallType.intType, [jni.JValueInt(i)]).integer;
  }

  static final _id_loadPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"loadPage", r"(II)Lcom/artifex/mupdf/fitz/Page;");

  /// from: public native com.artifex.mupdf.fitz.Page loadPage(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  page_.Page loadPage(
    int i,
    int i1,
  ) {
    return const page_.$PageType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadPage,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_countPages1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"countPages", r"()I");

  /// from: public int countPages()
  int countPages1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_countPages1, jni.JniCallType.intType, []).integer;
  }

  static final _id_loadPage1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"loadPage",
      r"(Lcom/artifex/mupdf/fitz/Location;)Lcom/artifex/mupdf/fitz/Page;");

  /// from: public com.artifex.mupdf.fitz.Page loadPage(com.artifex.mupdf.fitz.Location location)
  /// The returned object must be released after use, by calling the [release] method.
  page_.Page loadPage1(
    location_.Location location,
  ) {
    return const page_.$PageType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadPage1,
        jni.JniCallType.objectType,
        [location.reference]).object);
  }

  static final _id_loadPage2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"loadPage", r"(I)Lcom/artifex/mupdf/fitz/Page;");

  /// from: public com.artifex.mupdf.fitz.Page loadPage(int i)
  /// The returned object must be released after use, by calling the [release] method.
  page_.Page loadPage2(
    int i,
  ) {
    return const page_.$PageType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_loadPage2,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_lastPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"lastPage", r"()Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location lastPage()
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location lastPage() {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_lastPage, jni.JniCallType.objectType, []).object);
  }

  static final _id_nextPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"nextPage",
      r"(Lcom/artifex/mupdf/fitz/Location;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location nextPage(com.artifex.mupdf.fitz.Location location)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location nextPage(
    location_.Location location,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_nextPage, jni.JniCallType.objectType,
            [location.reference]).object);
  }

  static final _id_previousPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"previousPage",
      r"(Lcom/artifex/mupdf/fitz/Location;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location previousPage(com.artifex.mupdf.fitz.Location location)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location previousPage(
    location_.Location location,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_previousPage,
            jni.JniCallType.objectType, [location.reference]).object);
  }

  static final _id_clampLocation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"clampLocation",
      r"(Lcom/artifex/mupdf/fitz/Location;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location clampLocation(com.artifex.mupdf.fitz.Location location)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location clampLocation(
    location_.Location location,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_clampLocation,
            jni.JniCallType.objectType, [location.reference]).object);
  }

  static final _id_locationFromPageNumber = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"locationFromPageNumber",
      r"(I)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location locationFromPageNumber(int i)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location locationFromPageNumber(
    int i,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_locationFromPageNumber,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_pageNumberFromLocation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"pageNumberFromLocation",
      r"(Lcom/artifex/mupdf/fitz/Location;)I");

  /// from: public int pageNumberFromLocation(com.artifex.mupdf.fitz.Location location)
  int pageNumberFromLocation(
    location_.Location location,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_pageNumberFromLocation,
        jni.JniCallType.intType,
        [location.reference]).integer;
  }

  static final _id_search = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"search", r"(IILjava/lang/String;)[[Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public native com.artifex.mupdf.fitz.Quad[][] search(int i, int i1, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<quad_.Quad> search(
    int i,
    int i1,
    jni.JString string,
  ) {
    return const jni.JArrayType(quad_.$QuadType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_search, jni.JniCallType.objectType,
            [jni.JValueInt(i), jni.JValueInt(i1), string.reference]).object);
  }

  static final _id_resolveLink = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLink",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public native com.artifex.mupdf.fitz.Location resolveLink(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location resolveLink(
    jni.JString string,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_resolveLink,
            jni.JniCallType.objectType, [string.reference]).object);
  }

  static final _id_resolveLink1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLink",
      r"(Lcom/artifex/mupdf/fitz/Outline;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location resolveLink(com.artifex.mupdf.fitz.Outline outline)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location resolveLink1(
    outline_.Outline outline,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_resolveLink1,
            jni.JniCallType.objectType, [outline.reference]).object);
  }

  static final _id_resolveLink2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLink",
      r"(Lcom/artifex/mupdf/fitz/Link;)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public com.artifex.mupdf.fitz.Location resolveLink(com.artifex.mupdf.fitz.Link link)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location resolveLink2(
    link_.Link link,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_resolveLink2,
            jni.JniCallType.objectType, [link.reference]).object);
  }

  static final _id_resolveLinkDestination = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLinkDestination",
      r"(Ljava/lang/String;)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: public native com.artifex.mupdf.fitz.LinkDestination resolveLinkDestination(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  linkdestination_.LinkDestination resolveLinkDestination(
    jni.JString string,
  ) {
    return const linkdestination_.$LinkDestinationType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_resolveLinkDestination,
            jni.JniCallType.objectType,
            [string.reference]).object);
  }

  static final _id_resolveLinkDestination1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLinkDestination",
      r"(Lcom/artifex/mupdf/fitz/OutlineIterator$OutlineItem;)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: public com.artifex.mupdf.fitz.LinkDestination resolveLinkDestination(com.artifex.mupdf.fitz.OutlineIterator$OutlineItem outlineItem)
  /// The returned object must be released after use, by calling the [release] method.
  linkdestination_.LinkDestination resolveLinkDestination1(
    outlineiterator_.OutlineIterator_OutlineItem outlineItem,
  ) {
    return const linkdestination_.$LinkDestinationType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_resolveLinkDestination1,
            jni.JniCallType.objectType,
            [outlineItem.reference]).object);
  }

  static final _id_resolveLinkDestination2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLinkDestination",
      r"(Lcom/artifex/mupdf/fitz/Outline;)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: public com.artifex.mupdf.fitz.LinkDestination resolveLinkDestination(com.artifex.mupdf.fitz.Outline outline)
  /// The returned object must be released after use, by calling the [release] method.
  linkdestination_.LinkDestination resolveLinkDestination2(
    outline_.Outline outline,
  ) {
    return const linkdestination_.$LinkDestinationType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_resolveLinkDestination2,
            jni.JniCallType.objectType,
            [outline.reference]).object);
  }

  static final _id_resolveLinkDestination3 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"resolveLinkDestination",
      r"(Lcom/artifex/mupdf/fitz/Link;)Lcom/artifex/mupdf/fitz/LinkDestination;");

  /// from: public com.artifex.mupdf.fitz.LinkDestination resolveLinkDestination(com.artifex.mupdf.fitz.Link link)
  /// The returned object must be released after use, by calling the [release] method.
  linkdestination_.LinkDestination resolveLinkDestination3(
    link_.Link link,
  ) {
    return const linkdestination_.$LinkDestinationType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_resolveLinkDestination3,
            jni.JniCallType.objectType,
            [link.reference]).object);
  }

  static final _id_loadOutline = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"loadOutline", r"()[Lcom/artifex/mupdf/fitz/Outline;");

  /// from: public native com.artifex.mupdf.fitz.Outline[] loadOutline()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<outline_.Outline> loadOutline() {
    return const jni.JArrayType(outline_.$OutlineType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference, _id_loadOutline, jni.JniCallType.objectType, []).object);
  }

  static final _id_outlineIterator = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"outlineIterator",
      r"()Lcom/artifex/mupdf/fitz/OutlineIterator;");

  /// from: public native com.artifex.mupdf.fitz.OutlineIterator outlineIterator()
  /// The returned object must be released after use, by calling the [release] method.
  outlineiterator_.OutlineIterator outlineIterator() {
    return const outlineiterator_.$OutlineIteratorType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(reference, _id_outlineIterator,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getMetaData = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getMetaData",
      r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public native java.lang.String getMetaData(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getMetaData(
    jni.JString string,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getMetaData,
        jni.JniCallType.objectType,
        [string.reference]).object);
  }

  static final _id_setMetaData = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"setMetaData",
      r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public native void setMetaData(java.lang.String string, java.lang.String string1)
  void setMetaData(
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_setMetaData,
        jni.JniCallType.voidType,
        [string.reference, string1.reference]).check();
  }

  static final _id_isReflowable = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isReflowable", r"()Z");

  /// from: public native boolean isReflowable()
  bool isReflowable() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isReflowable, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_layout =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"layout", r"(FFF)V");

  /// from: public native void layout(float f, float f1, float f2)
  void layout(
    double f,
    double f1,
    double f2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_layout,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f), jni.JValueFloat(f1), jni.JValueFloat(f2)]).check();
  }

  static final _id_findBookmark = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"findBookmark",
      r"(J)Lcom/artifex/mupdf/fitz/Location;");

  /// from: public native com.artifex.mupdf.fitz.Location findBookmark(long j)
  /// The returned object must be released after use, by calling the [release] method.
  location_.Location findBookmark(
    int j,
  ) {
    return const location_.$LocationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_findBookmark,
            jni.JniCallType.objectType, [j]).object);
  }

  static final _id_makeBookmark = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"makeBookmark", r"(II)J");

  /// from: public native long makeBookmark(int i, int i1)
  int makeBookmark(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_makeBookmark,
        jni.JniCallType.longType, [jni.JValueInt(i), jni.JValueInt(i1)]).long;
  }

  static final _id_makeBookmark1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"makeBookmark",
      r"(Lcom/artifex/mupdf/fitz/Location;)J");

  /// from: public long makeBookmark(com.artifex.mupdf.fitz.Location location)
  int makeBookmark1(
    location_.Location location,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_makeBookmark1,
        jni.JniCallType.longType, [location.reference]).long;
  }

  static final _id_hasPermission = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"hasPermission", r"(I)Z");

  /// from: public native boolean hasPermission(int i)
  bool hasPermission(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_hasPermission,
        jni.JniCallType.booleanType, [jni.JValueInt(i)]).boolean;
  }

  static final _id_isUnencryptedPDF = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isUnencryptedPDF", r"()Z");

  /// from: public native boolean isUnencryptedPDF()
  bool isUnencryptedPDF() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_isUnencryptedPDF,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_formatLinkURI = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"formatLinkURI",
      r"(Lcom/artifex/mupdf/fitz/LinkDestination;)Ljava/lang/String;");

  /// from: public native java.lang.String formatLinkURI(com.artifex.mupdf.fitz.LinkDestination linkDestination)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString formatLinkURI(
    linkdestination_.LinkDestination linkDestination,
  ) {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_formatLinkURI,
        jni.JniCallType.objectType,
        [linkDestination.reference]).object);
  }

  static final _id_isPDF =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isPDF", r"()Z");

  /// from: public boolean isPDF()
  bool isPDF() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isPDF, jni.JniCallType.booleanType, []).boolean;
  }
}

class $DocumentType extends jni.JObjType<Document> {
  const $DocumentType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Document;";

  @override
  Document fromRef(jni.JObjectPtr ref) => Document.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DocumentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DocumentType) && other is $DocumentType;
  }
}

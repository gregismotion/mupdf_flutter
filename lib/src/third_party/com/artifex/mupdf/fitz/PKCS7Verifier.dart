// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "FitzInputStream.dart" as fitzinputstream_;

/// from: com.artifex.mupdf.fitz.PKCS7Verifier
class PKCS7Verifier extends jni.JObject {
  @override
  late final jni.JObjType<PKCS7Verifier> $type = type;

  PKCS7Verifier.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PKCS7Verifier");

  /// The type which includes information such as the signature of this class.
  static const type = $PKCS7VerifierType();

  /// from: static public final int PKCS7VerifierOK
  static const PKCS7VerifierOK = 0;

  /// from: static public final int PKCS7VerifierNoSignature
  static const PKCS7VerifierNoSignature = 1;

  /// from: static public final int PKCS7VerifierNoCertificate
  static const PKCS7VerifierNoCertificate = 2;

  /// from: static public final int PKCS7VerifierDigestFailure
  static const PKCS7VerifierDigestFailure = 3;

  /// from: static public final int PKCS7VerifierSelfSigned
  static const PKCS7VerifierSelfSigned = 4;

  /// from: static public final int PKCS7VerifierSelfSignedInChain
  static const PKCS7VerifierSelfSignedInChain = 5;

  /// from: static public final int PKCS7VerifierNotTrusted
  static const PKCS7VerifierNotTrusted = 6;

  /// from: static public final int PKCS7VerifierUnknown
  static const PKCS7VerifierUnknown = -1;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: protected void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PKCS7Verifier() {
    return PKCS7Verifier.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_checkDigest = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkDigest",
      r"(Lcom/artifex/mupdf/fitz/FitzInputStream;[B)I");

  /// from: public abstract int checkDigest(com.artifex.mupdf.fitz.FitzInputStream fitzInputStream, byte[] bs)
  int checkDigest(
    fitzinputstream_.FitzInputStream fitzInputStream,
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_checkDigest,
        jni.JniCallType.intType,
        [fitzInputStream.reference, bs.reference]).integer;
  }

  static final _id_checkCertificate = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"checkCertificate", r"([B)I");

  /// from: public abstract int checkCertificate(byte[] bs)
  int checkCertificate(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkCertificate,
        jni.JniCallType.intType, [bs.reference]).integer;
  }
}

class $PKCS7VerifierType extends jni.JObjType<PKCS7Verifier> {
  const $PKCS7VerifierType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PKCS7Verifier;";

  @override
  PKCS7Verifier fromRef(jni.JObjectPtr ref) => PKCS7Verifier.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PKCS7VerifierType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PKCS7VerifierType) &&
        other is $PKCS7VerifierType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Page.dart" as page_;

import "PDFAnnotation.dart" as pdfannotation_;

import "PDFWidget.dart" as pdfwidget_;

import "Matrix.dart" as matrix_;

import "Rect.dart" as rect_;

import "Link.dart" as link_;

/// from: com.artifex.mupdf.fitz.PDFPage
class PDFPage extends page_.Page {
  @override
  late final jni.JObjType<PDFPage> $type = type;

  PDFPage.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFPage");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFPageType();

  /// from: static public final int REDACT_IMAGE_NONE
  static const REDACT_IMAGE_NONE = 0;

  /// from: static public final int REDACT_IMAGE_REMOVE
  static const REDACT_IMAGE_REMOVE = 1;

  /// from: static public final int REDACT_IMAGE_PIXELS
  static const REDACT_IMAGE_PIXELS = 2;

  static final _id_getAnnotations = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getAnnotations",
      r"()[Lcom/artifex/mupdf/fitz/PDFAnnotation;");

  /// from: public native com.artifex.mupdf.fitz.PDFAnnotation[] getAnnotations()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<pdfannotation_.PDFAnnotation> getAnnotations() {
    return const jni.JArrayType(pdfannotation_.$PDFAnnotationType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(reference, _id_getAnnotations,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_createAnnotation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createAnnotation",
      r"(I)Lcom/artifex/mupdf/fitz/PDFAnnotation;");

  /// from: public native com.artifex.mupdf.fitz.PDFAnnotation createAnnotation(int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pdfannotation_.PDFAnnotation createAnnotation(
    int i,
  ) {
    return const pdfannotation_.$PDFAnnotationType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_createAnnotation,
            jni.JniCallType.objectType, [jni.JValueInt(i)]).object);
  }

  static final _id_deleteAnnotation = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"deleteAnnotation",
      r"(Lcom/artifex/mupdf/fitz/PDFAnnotation;)V");

  /// from: public native void deleteAnnotation(com.artifex.mupdf.fitz.PDFAnnotation pDFAnnotation)
  void deleteAnnotation(
    pdfannotation_.PDFAnnotation pDFAnnotation,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_deleteAnnotation,
        jni.JniCallType.voidType, [pDFAnnotation.reference]).check();
  }

  static final _id_applyRedactions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"applyRedactions", r"(ZI)Z");

  /// from: public native boolean applyRedactions(boolean z, int i)
  bool applyRedactions(
    bool z,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_applyRedactions,
        jni.JniCallType.booleanType, [z ? 1 : 0, jni.JValueInt(i)]).boolean;
  }

  static final _id_applyRedactions1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"applyRedactions", r"()Z");

  /// from: public boolean applyRedactions()
  bool applyRedactions1() {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_applyRedactions1,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_update =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"update", r"()Z");

  /// from: public native boolean update()
  bool update() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_update, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getWidgets = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getWidgets",
      r"()[Lcom/artifex/mupdf/fitz/PDFWidget;");

  /// from: public native com.artifex.mupdf.fitz.PDFWidget[] getWidgets()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<pdfwidget_.PDFWidget> getWidgets() {
    return const jni.JArrayType(pdfwidget_.$PDFWidgetType()).fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference, _id_getWidgets, jni.JniCallType.objectType, []).object);
  }

  static final _id_activateWidgetAt = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"activateWidgetAt",
      r"(FF)Lcom/artifex/mupdf/fitz/PDFWidget;");

  /// from: public com.artifex.mupdf.fitz.PDFWidget activateWidgetAt(float f, float f1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pdfwidget_.PDFWidget activateWidgetAt(
    double f,
    double f1,
  ) {
    return const pdfwidget_.$PDFWidgetType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_activateWidgetAt,
            jni.JniCallType.objectType,
            [jni.JValueFloat(f), jni.JValueFloat(f1)]).object);
  }

  static final _id_createSignature = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createSignature",
      r"()Lcom/artifex/mupdf/fitz/PDFWidget;");

  /// from: public native com.artifex.mupdf.fitz.PDFWidget createSignature()
  /// The returned object must be deleted after use, by calling the `delete` method.
  pdfwidget_.PDFWidget createSignature() {
    return const pdfwidget_.$PDFWidgetType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_createSignature,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_getTransform = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"getTransform", r"()Lcom/artifex/mupdf/fitz/Matrix;");

  /// from: public native com.artifex.mupdf.fitz.Matrix getTransform()
  /// The returned object must be deleted after use, by calling the `delete` method.
  matrix_.Matrix getTransform() {
    return const matrix_.$MatrixType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_getTransform,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_createLinkFit = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFit",
      r"(Lcom/artifex/mupdf/fitz/Rect;I)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFit(com.artifex.mupdf.fitz.Rect rect, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFit(
    rect_.Rect rect,
    int i,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFit,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i)]).object);
  }

  static final _id_createLinkFitB = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitB",
      r"(Lcom/artifex/mupdf/fitz/Rect;I)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitB(com.artifex.mupdf.fitz.Rect rect, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitB(
    rect_.Rect rect,
    int i,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFitB,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i)]).object);
  }

  static final _id_createLinkXYZ = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkXYZ",
      r"(Lcom/artifex/mupdf/fitz/Rect;IFFF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkXYZ(com.artifex.mupdf.fitz.Rect rect, int i, float f, float f1, float f2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkXYZ(
    rect_.Rect rect,
    int i,
    double f,
    double f1,
    double f2,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createLinkXYZ, jni.JniCallType.objectType, [
      rect.reference,
      jni.JValueInt(i),
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2)
    ]).object);
  }

  static final _id_createLinkFitR = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitR",
      r"(Lcom/artifex/mupdf/fitz/Rect;IFFFF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitR(com.artifex.mupdf.fitz.Rect rect, int i, float f, float f1, float f2, float f3)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitR(
    rect_.Rect rect,
    int i,
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_createLinkFitR, jni.JniCallType.objectType, [
      rect.reference,
      jni.JValueInt(i),
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3)
    ]).object);
  }

  static final _id_createLinkFitV = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitV",
      r"(Lcom/artifex/mupdf/fitz/Rect;IF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitV(com.artifex.mupdf.fitz.Rect rect, int i, float f)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitV(
    rect_.Rect rect,
    int i,
    double f,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFitV,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i), jni.JValueFloat(f)]).object);
  }

  static final _id_createLinkFitBV = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitBV",
      r"(Lcom/artifex/mupdf/fitz/Rect;IF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitBV(com.artifex.mupdf.fitz.Rect rect, int i, float f)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitBV(
    rect_.Rect rect,
    int i,
    double f,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFitBV,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i), jni.JValueFloat(f)]).object);
  }

  static final _id_createLinkFitH = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitH",
      r"(Lcom/artifex/mupdf/fitz/Rect;IF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitH(com.artifex.mupdf.fitz.Rect rect, int i, float f)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitH(
    rect_.Rect rect,
    int i,
    double f,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFitH,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i), jni.JValueFloat(f)]).object);
  }

  static final _id_createLinkFitBH = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"createLinkFitBH",
      r"(Lcom/artifex/mupdf/fitz/Rect;IF)Lcom/artifex/mupdf/fitz/Link;");

  /// from: public com.artifex.mupdf.fitz.Link createLinkFitBH(com.artifex.mupdf.fitz.Rect rect, int i, float f)
  /// The returned object must be deleted after use, by calling the `delete` method.
  link_.Link createLinkFitBH(
    rect_.Rect rect,
    int i,
    double f,
  ) {
    return const link_.$LinkType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_createLinkFitBH,
        jni.JniCallType.objectType,
        [rect.reference, jni.JValueInt(i), jni.JValueFloat(f)]).object);
  }
}

class $PDFPageType extends jni.JObjType<PDFPage> {
  const $PDFPageType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PDFPage;";

  @override
  PDFPage fromRef(jni.JObjectPtr ref) => PDFPage.fromRef(ref);

  @override
  jni.JObjType get superType => const page_.$PageType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDFPageType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFPageType) && other is $PDFPageType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.Context$Log
class Context_Log extends jni.JObject {
  @override
  late final jni.JObjType<Context_Log> $type = type;

  Context_Log.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Context$Log");

  /// The type which includes information such as the signature of this class.
  static const type = $Context_LogType();
  static final _id_error = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"error", r"(Ljava/lang/String;)V");

  /// from: public abstract void error(java.lang.String string)
  void error(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_error,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_warning = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"warning", r"(Ljava/lang/String;)V");

  /// from: public abstract void warning(java.lang.String string)
  void warning(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_warning,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  /// Maps a specific port to the implemented interface.
  static final Map<int, $Context_LogImpl> _$impls = {};
  ReceivePort? _$p;

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d == r"error(Ljava/lang/String;)V") {
        _$impls[$p]!.error(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
      if ($d == r"warning(Ljava/lang/String;)V") {
        _$impls[$p]!.warning(
          $a[0].castTo(const jni.JStringType(), releaseOriginal: true),
        );
        return jni.nullptr;
      }
    } catch (e) {
      return ProtectedJniExtensions.newDartException(e.toString());
    }
    return jni.nullptr;
  }

  factory Context_Log.implement(
    $Context_LogImpl $impl,
  ) {
    final $p = ReceivePort();
    final $x = Context_Log.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.artifex.mupdf.fitz.Context$Log",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
    $p.listen(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

abstract class $Context_LogImpl {
  factory $Context_LogImpl({
    required void Function(jni.JString string) error,
    required void Function(jni.JString string) warning,
  }) = _$Context_LogImpl;

  void error(jni.JString string);
  void warning(jni.JString string);
}

class _$Context_LogImpl implements $Context_LogImpl {
  _$Context_LogImpl({
    required void Function(jni.JString string) error,
    required void Function(jni.JString string) warning,
  })  : _error = error,
        _warning = warning;

  final void Function(jni.JString string) _error;
  final void Function(jni.JString string) _warning;

  void error(jni.JString string) {
    return _error(string);
  }

  void warning(jni.JString string) {
    return _warning(string);
  }
}

class $Context_LogType extends jni.JObjType<Context_Log> {
  const $Context_LogType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Context$Log;";

  @override
  Context_Log fromRef(jni.JObjectPtr ref) => Context_Log.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_LogType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_LogType) && other is $Context_LogType;
  }
}

/// from: com.artifex.mupdf.fitz.Context$Version
class Context_Version extends jni.JObject {
  @override
  late final jni.JObjType<Context_Version> $type = type;

  Context_Version.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Context$Version");

  /// The type which includes information such as the signature of this class.
  static const type = $Context_VersionType();
  static final _id_version = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"version",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String version
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get version => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_version, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String version
  /// The returned object must be released after use, by calling the [release] method.
  set version(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_version, value.reference);

  static final _id_major = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"major",
    r"I",
  );

  /// from: public int major
  int get major => jni.Jni.accessors
      .getField(reference, _id_major, jni.JniCallType.intType)
      .integer;

  /// from: public int major
  set major(int value) => jni.Jni.env.SetIntField(reference, _id_major, value);

  static final _id_minor = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"minor",
    r"I",
  );

  /// from: public int minor
  int get minor => jni.Jni.accessors
      .getField(reference, _id_minor, jni.JniCallType.intType)
      .integer;

  /// from: public int minor
  set minor(int value) => jni.Jni.env.SetIntField(reference, _id_minor, value);

  static final _id_patch = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"patch",
    r"I",
  );

  /// from: public int patch
  int get patch => jni.Jni.accessors
      .getField(reference, _id_patch, jni.JniCallType.intType)
      .integer;

  /// from: public int patch
  set patch(int value) => jni.Jni.env.SetIntField(reference, _id_patch, value);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context_Version() {
    return Context_Version.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }
}

class $Context_VersionType extends jni.JObjType<Context_Version> {
  const $Context_VersionType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Context$Version;";

  @override
  Context_Version fromRef(jni.JObjectPtr ref) => Context_Version.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Context_VersionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Context_VersionType) &&
        other is $Context_VersionType;
  }
}

/// from: com.artifex.mupdf.fitz.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Context");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_init =
      jni.Jni.accessors.getStaticMethodIDOf(_class.reference, r"init", r"()V");

  /// from: static public void init()
  static void init() {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference, _id_init, jni.JniCallType.voidType, []).check();
  }

  static final _id_emptyStore = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"emptyStore", r"()V");

  /// from: static public native void emptyStore()
  static void emptyStore() {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference, _id_emptyStore, jni.JniCallType.voidType, []).check();
  }

  static final _id_shrinkStore = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"shrinkStore", r"(I)Z");

  /// from: static public native boolean shrinkStore(int i)
  static bool shrinkStore(
    int i,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_shrinkStore,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i)]).boolean;
  }

  static final _id_enableICC = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"enableICC", r"()V");

  /// from: static public native void enableICC()
  static void enableICC() {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference, _id_enableICC, jni.JniCallType.voidType, []).check();
  }

  static final _id_disableICC = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"disableICC", r"()V");

  /// from: static public native void disableICC()
  static void disableICC() {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference, _id_disableICC, jni.JniCallType.voidType, []).check();
  }

  static final _id_setAntiAliasLevel = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"setAntiAliasLevel", r"(I)V");

  /// from: static public native void setAntiAliasLevel(int i)
  static void setAntiAliasLevel(
    int i,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(
        _class.reference,
        _id_setAntiAliasLevel,
        jni.JniCallType.voidType,
        [jni.JValueInt(i)]).check();
  }

  static final _id_setUserCSS = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"setUserCSS", r"(Ljava/lang/String;)V");

  /// from: static public native void setUserCSS(java.lang.String string)
  static void setUserCSS(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_setUserCSS, jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_useDocumentCSS = jni.Jni.accessors
      .getStaticMethodIDOf(_class.reference, r"useDocumentCSS", r"(Z)V");

  /// from: static public native void useDocumentCSS(boolean z)
  static void useDocumentCSS(
    bool z,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_useDocumentCSS, jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_getVersion = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"getVersion",
      r"()Lcom/artifex/mupdf/fitz/Context$Version;");

  /// from: static public native com.artifex.mupdf.fitz.Context$Version getVersion()
  /// The returned object must be released after use, by calling the [release] method.
  static Context_Version getVersion() {
    return const $Context_VersionType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_getVersion,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_setLog = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference, r"setLog", r"(Lcom/artifex/mupdf/fitz/Context$Log;)V");

  /// from: static public void setLog(com.artifex.mupdf.fitz.Context$Log log)
  static void setLog(
    Context_Log log,
  ) {
    return jni.Jni.accessors.callStaticMethodWithArgs(_class.reference,
        _id_setLog, jni.JniCallType.voidType, [log.reference]).check();
  }
}

class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Context;";

  @override
  Context fromRef(jni.JObjectPtr ref) => Context.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../../java/io/RandomAccessFile.dart" as randomaccessfile_;

/// from: com.artifex.mupdf.fitz.FileStream
class FileStream extends jni.JObject {
  @override
  late final jni.JObjType<FileStream> $type = type;

  FileStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/FileStream");

  /// The type which includes information such as the signature of this class.
  static const type = $FileStreamType();
  static final _id_file = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"file",
    r"Ljava/io/RandomAccessFile;",
  );

  /// from: protected java.io.RandomAccessFile file
  /// The returned object must be released after use, by calling the [release] method.
  randomaccessfile_.RandomAccessFile get file =>
      const randomaccessfile_.$RandomAccessFileType().fromRef(jni.Jni.accessors
          .getField(reference, _id_file, jni.JniCallType.objectType)
          .object);

  /// from: protected java.io.RandomAccessFile file
  /// The returned object must be released after use, by calling the [release] method.
  set file(randomaccessfile_.RandomAccessFile value) =>
      jni.Jni.env.SetObjectField(reference, _id_file, value.reference);

  static final _id_new0 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory FileStream(
    jni.JString string,
    jni.JString string1,
  ) {
    return FileStream.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [string.reference, string1.reference]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Ljava/io/File;Ljava/lang/String;)V");

  /// from: public void <init>(java.io.File file, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory FileStream.new1(
    jni.JObject file,
    jni.JString string,
  ) {
    return FileStream.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [file.reference, string.reference]).object);
  }

  static final _id_read =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"read", r"([B)I");

  /// from: public int read(byte[] bs)
  int read(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_read, jni.JniCallType.intType, [bs.reference]).integer;
  }

  static final _id_write =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"write", r"([BII)V");

  /// from: public void write(byte[] bs, int i, int i1)
  void write(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_write,
        jni.JniCallType.voidType,
        [bs.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_seek =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"seek", r"(JI)J");

  /// from: public long seek(long j, int i)
  int seek(
    int j,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_seek,
        jni.JniCallType.longType, [j, jni.JValueInt(i)]).long;
  }

  static final _id_position =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"position", r"()J");

  /// from: public long position()
  int position() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_position, jni.JniCallType.longType, []).long;
  }

  static final _id_close =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"close", r"()V");

  /// from: public void close()
  void close() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_close, jni.JniCallType.voidType, []).check();
  }

  static final _id_truncate =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"truncate", r"()V");

  /// from: public void truncate()
  void truncate() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_truncate, jni.JniCallType.voidType, []).check();
  }
}

class $FileStreamType extends jni.JObjType<FileStream> {
  const $FileStreamType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/FileStream;";

  @override
  FileStream fromRef(jni.JObjectPtr ref) => FileStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FileStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FileStreamType) && other is $FileStreamType;
  }
}

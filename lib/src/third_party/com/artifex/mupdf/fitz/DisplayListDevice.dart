// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "NativeDevice.dart" as nativedevice_;

import "DisplayList.dart" as displaylist_;

/// from: com.artifex.mupdf.fitz.DisplayListDevice
class DisplayListDevice extends nativedevice_.NativeDevice {
  @override
  late final jni.JObjType<DisplayListDevice> $type = type;

  DisplayListDevice.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/DisplayListDevice");

  /// The type which includes information such as the signature of this class.
  static const type = $DisplayListDeviceType();
  static final _id_new2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/DisplayList;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.DisplayList displayList)
  /// The returned object must be released after use, by calling the [release] method.
  factory DisplayListDevice.new2(
    displaylist_.DisplayList displayList,
  ) {
    return DisplayListDevice.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new2, [displayList.reference]).object);
  }
}

class $DisplayListDeviceType extends jni.JObjType<DisplayListDevice> {
  const $DisplayListDeviceType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/DisplayListDevice;";

  @override
  DisplayListDevice fromRef(jni.JObjectPtr ref) =>
      DisplayListDevice.fromRef(ref);

  @override
  jni.JObjType get superType => const nativedevice_.$NativeDeviceType();

  @override
  final superCount = 3;

  @override
  int get hashCode => ($DisplayListDeviceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DisplayListDeviceType) &&
        other is $DisplayListDeviceType;
  }
}

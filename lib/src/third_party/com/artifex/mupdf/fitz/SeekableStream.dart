// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.SeekableStream
class SeekableStream extends jni.JObject {
  @override
  late final jni.JObjType<SeekableStream> $type = type;

  SeekableStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/SeekableStream");

  /// The type which includes information such as the signature of this class.
  static const type = $SeekableStreamType();

  /// from: static public final int SEEK_SET
  static const SEEK_SET = 0;

  /// from: static public final int SEEK_CUR
  static const SEEK_CUR = 1;

  /// from: static public final int SEEK_END
  static const SEEK_END = 2;

  static final _id_seek =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"seek", r"(JI)J");

  /// from: public abstract long seek(long j, int i)
  int seek(
    int j,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_seek,
        jni.JniCallType.longType, [j, jni.JValueInt(i)]).long;
  }

  static final _id_position =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"position", r"()J");

  /// from: public abstract long position()
  int position() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_position, jni.JniCallType.longType, []).long;
  }

  /// Maps a specific port to the implemented methods.
  static final Map<int, Map<String, Function>> _$methods = {};

  /// Maps a specific port to the type parameters.
  static final Map<int, Map<String, jni.JObjType>> _$types = {};

  ReceivePort? _$p;

  static final Finalizer<ReceivePort> _$finalizer = Finalizer(($p) {
    _$methods.remove($p.sendPort.nativePort);
    _$types.remove($p.sendPort.nativePort);
    $p.close();
  });

  @override
  void delete() {
    _$methods.remove(_$p?.sendPort.nativePort);
    _$types.remove(_$p?.sendPort.nativePort);
    _$p?.close();
    _$finalizer.detach(this);
    super.delete();
  }

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    final $d = $i.methodDescriptor.toDartString(deleteOriginal: true);
    final $a = $i.args;
    if ($d == r"seek(JI)J") {
      final $r = _$methods[$p]![$d]!(
        $a[0]
            .castTo(const jni.JLongType(), deleteOriginal: true)
            .longValue(deleteOriginal: true),
        $a[1]
            .castTo(const jni.JIntegerType(), deleteOriginal: true)
            .intValue(deleteOriginal: true),
      );
      return (jni.JLong($r)..setAsDeleted()).reference;
    }
    if ($d == r"position()J") {
      final $r = _$methods[$p]![$d]!();
      return (jni.JLong($r)..setAsDeleted()).reference;
    }
    return jni.nullptr;
  }

  factory SeekableStream.implement({
    required int Function(int j, int i) seek,
    required int Function() position,
  }) {
    final $p = ReceivePort();
    final $x = SeekableStream.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.artifex.mupdf.fitz.SeekableStream",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$types[$a] = {};
    _$methods[$a] = {};
    _$methods[$a]![r"seek(JI)J"] = seek;
    _$methods[$a]![r"position()J"] = position;
    _$finalizer.attach($x, $p, detach: $x);
    $p.listen(($m) {
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

class $SeekableStreamType extends jni.JObjType<SeekableStream> {
  const $SeekableStreamType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/SeekableStream;";

  @override
  SeekableStream fromRef(jni.JObjectPtr ref) => SeekableStream.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($SeekableStreamType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($SeekableStreamType) &&
        other is $SeekableStreamType;
  }
}

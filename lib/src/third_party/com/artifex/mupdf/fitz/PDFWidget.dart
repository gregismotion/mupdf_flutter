// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Rect.dart" as rect_;

import "Matrix.dart" as matrix_;

import "PDFAnnotation.dart" as pdfannotation_;

import "Quad.dart" as quad_;

import "PKCS7Signer.dart" as pkcs7signer_;

import "Image.dart" as image_;

import "Pixmap.dart" as pixmap_;

import "PKCS7Verifier.dart" as pkcs7verifier_;

import "PKCS7DistinguishedName.dart" as pkcs7distinguishedname_;

/// from: com.artifex.mupdf.fitz.PDFWidget$TextWidgetCharLayout
class PDFWidget_TextWidgetCharLayout extends jni.JObject {
  @override
  late final jni.JObjType<PDFWidget_TextWidgetCharLayout> $type = type;

  PDFWidget_TextWidgetCharLayout.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"com/artifex/mupdf/fitz/PDFWidget$TextWidgetCharLayout");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFWidget_TextWidgetCharLayoutType();
  static final _id_x = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"x",
    r"F",
  );

  /// from: public float x
  double get x => jni.Jni.accessors
      .getField(reference, _id_x, jni.JniCallType.floatType)
      .float;

  /// from: public float x
  set x(double value) => jni.Jni.env.SetFloatField(reference, _id_x, value);

  static final _id_advance = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"advance",
    r"F",
  );

  /// from: public float advance
  double get advance => jni.Jni.accessors
      .getField(reference, _id_advance, jni.JniCallType.floatType)
      .float;

  /// from: public float advance
  set advance(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_advance, value);

  static final _id_index = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"index",
    r"I",
  );

  /// from: public int index
  int get index => jni.Jni.accessors
      .getField(reference, _id_index, jni.JniCallType.intType)
      .integer;

  /// from: public int index
  set index(int value) => jni.Jni.env.SetIntField(reference, _id_index, value);

  static final _id_rect = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"rect",
    r"Lcom/artifex/mupdf/fitz/Rect;",
  );

  /// from: public com.artifex.mupdf.fitz.Rect rect
  /// The returned object must be deleted after use, by calling the `delete` method.
  rect_.Rect get rect => const rect_.$RectType().fromRef(jni.Jni.accessors
      .getField(reference, _id_rect, jni.JniCallType.objectType)
      .object);

  /// from: public com.artifex.mupdf.fitz.Rect rect
  /// The returned object must be deleted after use, by calling the `delete` method.
  set rect(rect_.Rect value) =>
      jni.Jni.env.SetObjectField(reference, _id_rect, value.reference);

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PDFWidget_TextWidgetCharLayout() {
    return PDFWidget_TextWidgetCharLayout.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }
}

class $PDFWidget_TextWidgetCharLayoutType
    extends jni.JObjType<PDFWidget_TextWidgetCharLayout> {
  const $PDFWidget_TextWidgetCharLayoutType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetCharLayout;";

  @override
  PDFWidget_TextWidgetCharLayout fromRef(jni.JObjectPtr ref) =>
      PDFWidget_TextWidgetCharLayout.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFWidget_TextWidgetCharLayoutType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFWidget_TextWidgetCharLayoutType) &&
        other is $PDFWidget_TextWidgetCharLayoutType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFWidget$TextWidgetLayout
class PDFWidget_TextWidgetLayout extends jni.JObject {
  @override
  late final jni.JObjType<PDFWidget_TextWidgetLayout> $type = type;

  PDFWidget_TextWidgetLayout.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFWidget$TextWidgetLayout");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFWidget_TextWidgetLayoutType();
  static final _id_matrix = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"matrix",
    r"Lcom/artifex/mupdf/fitz/Matrix;",
  );

  /// from: public com.artifex.mupdf.fitz.Matrix matrix
  /// The returned object must be deleted after use, by calling the `delete` method.
  matrix_.Matrix get matrix =>
      const matrix_.$MatrixType().fromRef(jni.Jni.accessors
          .getField(reference, _id_matrix, jni.JniCallType.objectType)
          .object);

  /// from: public com.artifex.mupdf.fitz.Matrix matrix
  /// The returned object must be deleted after use, by calling the `delete` method.
  set matrix(matrix_.Matrix value) =>
      jni.Jni.env.SetObjectField(reference, _id_matrix, value.reference);

  static final _id_invMatrix = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"invMatrix",
    r"Lcom/artifex/mupdf/fitz/Matrix;",
  );

  /// from: public com.artifex.mupdf.fitz.Matrix invMatrix
  /// The returned object must be deleted after use, by calling the `delete` method.
  matrix_.Matrix get invMatrix =>
      const matrix_.$MatrixType().fromRef(jni.Jni.accessors
          .getField(reference, _id_invMatrix, jni.JniCallType.objectType)
          .object);

  /// from: public com.artifex.mupdf.fitz.Matrix invMatrix
  /// The returned object must be deleted after use, by calling the `delete` method.
  set invMatrix(matrix_.Matrix value) =>
      jni.Jni.env.SetObjectField(reference, _id_invMatrix, value.reference);

  static final _id_lines = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"lines",
    r"[Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetLineLayout;",
  );

  /// from: public com.artifex.mupdf.fitz.PDFWidget$TextWidgetLineLayout[] lines
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<PDFWidget_TextWidgetLineLayout> get lines =>
      const jni.JArrayType($PDFWidget_TextWidgetLineLayoutType()).fromRef(jni
          .Jni.accessors
          .getField(reference, _id_lines, jni.JniCallType.objectType)
          .object);

  /// from: public com.artifex.mupdf.fitz.PDFWidget$TextWidgetLineLayout[] lines
  /// The returned object must be deleted after use, by calling the `delete` method.
  set lines(jni.JArray<PDFWidget_TextWidgetLineLayout> value) =>
      jni.Jni.env.SetObjectField(reference, _id_lines, value.reference);

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PDFWidget_TextWidgetLayout() {
    return PDFWidget_TextWidgetLayout.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }
}

class $PDFWidget_TextWidgetLayoutType
    extends jni.JObjType<PDFWidget_TextWidgetLayout> {
  const $PDFWidget_TextWidgetLayoutType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetLayout;";

  @override
  PDFWidget_TextWidgetLayout fromRef(jni.JObjectPtr ref) =>
      PDFWidget_TextWidgetLayout.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFWidget_TextWidgetLayoutType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFWidget_TextWidgetLayoutType) &&
        other is $PDFWidget_TextWidgetLayoutType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFWidget$TextWidgetLineLayout
class PDFWidget_TextWidgetLineLayout extends jni.JObject {
  @override
  late final jni.JObjType<PDFWidget_TextWidgetLineLayout> $type = type;

  PDFWidget_TextWidgetLineLayout.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(
      r"com/artifex/mupdf/fitz/PDFWidget$TextWidgetLineLayout");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFWidget_TextWidgetLineLayoutType();
  static final _id_x = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"x",
    r"F",
  );

  /// from: public float x
  double get x => jni.Jni.accessors
      .getField(reference, _id_x, jni.JniCallType.floatType)
      .float;

  /// from: public float x
  set x(double value) => jni.Jni.env.SetFloatField(reference, _id_x, value);

  static final _id_y = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"y",
    r"F",
  );

  /// from: public float y
  double get y => jni.Jni.accessors
      .getField(reference, _id_y, jni.JniCallType.floatType)
      .float;

  /// from: public float y
  set y(double value) => jni.Jni.env.SetFloatField(reference, _id_y, value);

  static final _id_fontSize = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"fontSize",
    r"F",
  );

  /// from: public float fontSize
  double get fontSize => jni.Jni.accessors
      .getField(reference, _id_fontSize, jni.JniCallType.floatType)
      .float;

  /// from: public float fontSize
  set fontSize(double value) =>
      jni.Jni.env.SetFloatField(reference, _id_fontSize, value);

  static final _id_index = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"index",
    r"I",
  );

  /// from: public int index
  int get index => jni.Jni.accessors
      .getField(reference, _id_index, jni.JniCallType.intType)
      .integer;

  /// from: public int index
  set index(int value) => jni.Jni.env.SetIntField(reference, _id_index, value);

  static final _id_rect = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"rect",
    r"Lcom/artifex/mupdf/fitz/Rect;",
  );

  /// from: public com.artifex.mupdf.fitz.Rect rect
  /// The returned object must be deleted after use, by calling the `delete` method.
  rect_.Rect get rect => const rect_.$RectType().fromRef(jni.Jni.accessors
      .getField(reference, _id_rect, jni.JniCallType.objectType)
      .object);

  /// from: public com.artifex.mupdf.fitz.Rect rect
  /// The returned object must be deleted after use, by calling the `delete` method.
  set rect(rect_.Rect value) =>
      jni.Jni.env.SetObjectField(reference, _id_rect, value.reference);

  static final _id_chars = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"chars",
    r"[Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetCharLayout;",
  );

  /// from: public com.artifex.mupdf.fitz.PDFWidget$TextWidgetCharLayout[] chars
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<PDFWidget_TextWidgetCharLayout> get chars =>
      const jni.JArrayType($PDFWidget_TextWidgetCharLayoutType()).fromRef(jni
          .Jni.accessors
          .getField(reference, _id_chars, jni.JniCallType.objectType)
          .object);

  /// from: public com.artifex.mupdf.fitz.PDFWidget$TextWidgetCharLayout[] chars
  /// The returned object must be deleted after use, by calling the `delete` method.
  set chars(jni.JArray<PDFWidget_TextWidgetCharLayout> value) =>
      jni.Jni.env.SetObjectField(reference, _id_chars, value.reference);

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PDFWidget_TextWidgetLineLayout() {
    return PDFWidget_TextWidgetLineLayout.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }
}

class $PDFWidget_TextWidgetLineLayoutType
    extends jni.JObjType<PDFWidget_TextWidgetLineLayout> {
  const $PDFWidget_TextWidgetLineLayoutType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetLineLayout;";

  @override
  PDFWidget_TextWidgetLineLayout fromRef(jni.JObjectPtr ref) =>
      PDFWidget_TextWidgetLineLayout.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PDFWidget_TextWidgetLineLayoutType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFWidget_TextWidgetLineLayoutType) &&
        other is $PDFWidget_TextWidgetLineLayoutType;
  }
}

/// from: com.artifex.mupdf.fitz.PDFWidget
class PDFWidget extends pdfannotation_.PDFAnnotation {
  @override
  late final jni.JObjType<PDFWidget> $type = type;

  PDFWidget.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PDFWidget");

  /// The type which includes information such as the signature of this class.
  static const type = $PDFWidgetType();

  /// from: static public final int TYPE_UNKNOWN
  static const TYPE_UNKNOWN1 = 0;

  /// from: static public final int TYPE_BUTTON
  static const TYPE_BUTTON = 1;

  /// from: static public final int TYPE_CHECKBOX
  static const TYPE_CHECKBOX = 2;

  /// from: static public final int TYPE_COMBOBOX
  static const TYPE_COMBOBOX = 3;

  /// from: static public final int TYPE_LISTBOX
  static const TYPE_LISTBOX = 4;

  /// from: static public final int TYPE_RADIOBUTTON
  static const TYPE_RADIOBUTTON = 5;

  /// from: static public final int TYPE_SIGNATURE
  static const TYPE_SIGNATURE = 6;

  /// from: static public final int TYPE_TEXT
  static const TYPE_TEXT1 = 7;

  /// from: static public final int TX_FORMAT_NONE
  static const TX_FORMAT_NONE = 0;

  /// from: static public final int TX_FORMAT_NUMBER
  static const TX_FORMAT_NUMBER = 1;

  /// from: static public final int TX_FORMAT_SPECIAL
  static const TX_FORMAT_SPECIAL = 2;

  /// from: static public final int TX_FORMAT_DATE
  static const TX_FORMAT_DATE = 3;

  /// from: static public final int TX_FORMAT_TIME
  static const TX_FORMAT_TIME = 4;

  /// from: static public final int PDF_FIELD_IS_READ_ONLY
  static const PDF_FIELD_IS_READ_ONLY = 1;

  /// from: static public final int PDF_FIELD_IS_REQUIRED
  static const PDF_FIELD_IS_REQUIRED = 2;

  /// from: static public final int PDF_FIELD_IS_NO_EXPORT
  static const PDF_FIELD_IS_NO_EXPORT = 4;

  /// from: static public final int PDF_TX_FIELD_IS_MULTILINE
  static const PDF_TX_FIELD_IS_MULTILINE = 4096;

  /// from: static public final int PDF_TX_FIELD_IS_PASSWORD
  static const PDF_TX_FIELD_IS_PASSWORD = 8192;

  /// from: static public final int PDF_TX_FIELD_IS_COMB
  static const PDF_TX_FIELD_IS_COMB = 16777216;

  /// from: static public final int PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF
  static const PDF_BTN_FIELD_IS_NO_TOGGLE_TO_OFF = 16384;

  /// from: static public final int PDF_BTN_FIELD_IS_RADIO
  static const PDF_BTN_FIELD_IS_RADIO = 32768;

  /// from: static public final int PDF_BTN_FIELD_IS_PUSHBUTTON
  static const PDF_BTN_FIELD_IS_PUSHBUTTON = 65536;

  /// from: static public final int PDF_CH_FIELD_IS_COMBO
  static const PDF_CH_FIELD_IS_COMBO = 131072;

  /// from: static public final int PDF_CH_FIELD_IS_EDIT
  static const PDF_CH_FIELD_IS_EDIT = 262144;

  /// from: static public final int PDF_CH_FIELD_IS_SORT
  static const PDF_CH_FIELD_IS_SORT = 524288;

  /// from: static public final int PDF_CH_FIELD_IS_MULTI_SELECT
  static const PDF_CH_FIELD_IS_MULTI_SELECT = 2097152;

  /// from: static public final int PDF_SIGNATURE_SHOW_LABELS
  static const PDF_SIGNATURE_SHOW_LABELS = 1;

  /// from: static public final int PDF_SIGNATURE_SHOW_DN
  static const PDF_SIGNATURE_SHOW_DN = 2;

  /// from: static public final int PDF_SIGNATURE_SHOW_DATE
  static const PDF_SIGNATURE_SHOW_DATE = 4;

  /// from: static public final int PDF_SIGNATURE_SHOW_TEXT_NAME
  static const PDF_SIGNATURE_SHOW_TEXT_NAME = 8;

  /// from: static public final int PDF_SIGNATURE_SHOW_GRAPHIC_NAME
  static const PDF_SIGNATURE_SHOW_GRAPHIC_NAME = 16;

  /// from: static public final int PDF_SIGNATURE_SHOW_LOGO
  static const PDF_SIGNATURE_SHOW_LOGO = 32;

  /// from: static public final int PDF_SIGNATURE_DEFAULT_APPEARANCE
  static const PDF_SIGNATURE_DEFAULT_APPEARANCE = 63;

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory PDFWidget(
    int j,
  ) {
    return PDFWidget.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, [j]).object);
  }

  static final _id_getFieldType = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFieldType", r"()I");

  /// from: public int getFieldType()
  int getFieldType() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFieldType, jni.JniCallType.intType, []).integer;
  }

  static final _id_getFieldFlags = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getFieldFlags", r"()I");

  /// from: public int getFieldFlags()
  int getFieldFlags() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getFieldFlags, jni.JniCallType.intType, []).integer;
  }

  static final _id_isReadOnly =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isReadOnly", r"()Z");

  /// from: public boolean isReadOnly()
  bool isReadOnly() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isReadOnly, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getValue = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getValue", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getValue()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getValue() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getValue, jni.JniCallType.objectType, []).object);
  }

  static final _id_setValue = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"setValue", r"(Ljava/lang/String;)Z");

  /// from: public native boolean setValue(java.lang.String string)
  bool setValue(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setValue,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_getLabel = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getLabel", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getLabel()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getLabel() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLabel, jni.JniCallType.objectType, []).object);
  }

  static final _id_isButton =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isButton", r"()Z");

  /// from: public boolean isButton()
  bool isButton() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isButton, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isPushButton = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isPushButton", r"()Z");

  /// from: public boolean isPushButton()
  bool isPushButton() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isPushButton, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isCheckbox =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isCheckbox", r"()Z");

  /// from: public boolean isCheckbox()
  bool isCheckbox() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isCheckbox, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isRadioButton = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"isRadioButton", r"()Z");

  /// from: public boolean isRadioButton()
  bool isRadioButton() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isRadioButton, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_toggle =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"toggle", r"()Z");

  /// from: public native boolean toggle()
  bool toggle() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toggle, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isText =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isText", r"()Z");

  /// from: public boolean isText()
  bool isText() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isText, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isMultiline =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isMultiline", r"()Z");

  /// from: public boolean isMultiline()
  bool isMultiline() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isMultiline, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isPassword =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isPassword", r"()Z");

  /// from: public boolean isPassword()
  bool isPassword() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isPassword, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isComb =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isComb", r"()Z");

  /// from: public boolean isComb()
  bool isComb() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isComb, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getMaxLen =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getMaxLen", r"()I");

  /// from: public int getMaxLen()
  int getMaxLen() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getMaxLen, jni.JniCallType.intType, []).integer;
  }

  static final _id_getTextFormat = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getTextFormat", r"()I");

  /// from: public int getTextFormat()
  int getTextFormat() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getTextFormat, jni.JniCallType.intType, []).integer;
  }

  static final _id_setTextValue = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setTextValue", r"(Ljava/lang/String;)Z");

  /// from: public native boolean setTextValue(java.lang.String string)
  bool setTextValue(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setTextValue,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_textQuads = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"textQuads", r"()[Lcom/artifex/mupdf/fitz/Quad;");

  /// from: public native com.artifex.mupdf.fitz.Quad[] textQuads()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<quad_.Quad> textQuads() {
    return const jni.JArrayType(quad_.$QuadType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_textQuads, jni.JniCallType.objectType, []).object);
  }

  static final _id_setEditing =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"setEditing", r"(Z)V");

  /// from: public native void setEditing(boolean z)
  void setEditing(
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setEditing,
        jni.JniCallType.voidType, [z ? 1 : 0]).check();
  }

  static final _id_isEditing =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isEditing", r"()Z");

  /// from: public native boolean isEditing()
  bool isEditing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isEditing, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_startEditing = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"startEditing", r"()V");

  /// from: public void startEditing()
  void startEditing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_startEditing, jni.JniCallType.voidType, []).check();
  }

  static final _id_cancelEditing = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"cancelEditing", r"()V");

  /// from: public void cancelEditing()
  void cancelEditing() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_cancelEditing, jni.JniCallType.voidType, []).check();
  }

  static final _id_commitEditing = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"commitEditing", r"(Ljava/lang/String;)Z");

  /// from: public boolean commitEditing(java.lang.String string)
  bool commitEditing(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_commitEditing,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_isChoice =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isChoice", r"()Z");

  /// from: public boolean isChoice()
  bool isChoice() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isChoice, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isComboBox =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isComboBox", r"()Z");

  /// from: public boolean isComboBox()
  bool isComboBox() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isComboBox, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_isListBox =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isListBox", r"()Z");

  /// from: public boolean isListBox()
  bool isListBox() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isListBox, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_getOptions = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getOptions", r"()[Ljava/lang/String;");

  /// from: public java.lang.String[] getOptions()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JArray<jni.JString> getOptions() {
    return const jni.JArrayType(jni.JStringType()).fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_getOptions, jni.JniCallType.objectType, []).object);
  }

  static final _id_setChoiceValue = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"setChoiceValue", r"(Ljava/lang/String;)Z");

  /// from: public native boolean setChoiceValue(java.lang.String string)
  bool setChoiceValue(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_setChoiceValue,
        jni.JniCallType.booleanType, [string.reference]).boolean;
  }

  static final _id_previewSignature = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(IIILcom/artifex/mupdf/fitz/PKCS7Signer;ILcom/artifex/mupdf/fitz/Image;Ljava/lang/String;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: static public com.artifex.mupdf.fitz.Pixmap previewSignature(int i, int i1, int i2, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, int i3, com.artifex.mupdf.fitz.Image image, java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pixmap_.Pixmap previewSignature(
    int i,
    int i1,
    int i2,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    int i3,
    image_.Image image,
    jni.JString string,
    jni.JString string1,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_previewSignature,
            jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      pKCS7Signer.reference,
      jni.JValueInt(i3),
      image.reference,
      string.reference,
      string1.reference
    ]).object);
  }

  static final _id_previewSignature1 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(IIILcom/artifex/mupdf/fitz/PKCS7Signer;Lcom/artifex/mupdf/fitz/Image;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: static public com.artifex.mupdf.fitz.Pixmap previewSignature(int i, int i1, int i2, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, com.artifex.mupdf.fitz.Image image)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pixmap_.Pixmap previewSignature1(
    int i,
    int i1,
    int i2,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    image_.Image image,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_previewSignature1,
            jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      pKCS7Signer.reference,
      image.reference
    ]).object);
  }

  static final _id_previewSignature2 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(IIILcom/artifex/mupdf/fitz/PKCS7Signer;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: static public com.artifex.mupdf.fitz.Pixmap previewSignature(int i, int i1, int i2, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pixmap_.Pixmap previewSignature2(
    int i,
    int i1,
    int i2,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_previewSignature2,
            jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      pKCS7Signer.reference
    ]).object);
  }

  static final _id_previewSignature3 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(IILcom/artifex/mupdf/fitz/PKCS7Signer;Lcom/artifex/mupdf/fitz/Image;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: static public com.artifex.mupdf.fitz.Pixmap previewSignature(int i, int i1, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, com.artifex.mupdf.fitz.Image image)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pixmap_.Pixmap previewSignature3(
    int i,
    int i1,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    image_.Image image,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_previewSignature3,
            jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      pKCS7Signer.reference,
      image.reference
    ]).object);
  }

  static final _id_previewSignature4 = jni.Jni.accessors.getStaticMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(IILcom/artifex/mupdf/fitz/PKCS7Signer;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: static public com.artifex.mupdf.fitz.Pixmap previewSignature(int i, int i1, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  static pixmap_.Pixmap previewSignature4(
    int i,
    int i1,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callStaticMethodWithArgs(_class.reference, _id_previewSignature4,
            jni.JniCallType.objectType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      pKCS7Signer.reference
    ]).object);
  }

  static final _id_previewSignature5 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(FLcom/artifex/mupdf/fitz/PKCS7Signer;ILcom/artifex/mupdf/fitz/Image;Ljava/lang/String;Ljava/lang/String;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public com.artifex.mupdf.fitz.Pixmap previewSignature(float f, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, int i, com.artifex.mupdf.fitz.Image image, java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pixmap_.Pixmap previewSignature5(
    double f,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    int i,
    image_.Image image,
    jni.JString string,
    jni.JString string1,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_previewSignature5, jni.JniCallType.objectType, [
      jni.JValueFloat(f),
      pKCS7Signer.reference,
      jni.JValueInt(i),
      image.reference,
      string.reference,
      string1.reference
    ]).object);
  }

  static final _id_previewSignature6 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(FLcom/artifex/mupdf/fitz/PKCS7Signer;Lcom/artifex/mupdf/fitz/Image;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public com.artifex.mupdf.fitz.Pixmap previewSignature(float f, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, com.artifex.mupdf.fitz.Image image)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pixmap_.Pixmap previewSignature6(
    double f,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    image_.Image image,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference, _id_previewSignature6, jni.JniCallType.objectType, [
      jni.JValueFloat(f),
      pKCS7Signer.reference,
      image.reference
    ]).object);
  }

  static final _id_previewSignature7 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"previewSignature",
      r"(FLcom/artifex/mupdf/fitz/PKCS7Signer;)Lcom/artifex/mupdf/fitz/Pixmap;");

  /// from: public com.artifex.mupdf.fitz.Pixmap previewSignature(float f, com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pixmap_.Pixmap previewSignature7(
    double f,
    pkcs7signer_.PKCS7Signer pKCS7Signer,
  ) {
    return const pixmap_.$PixmapType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(
            reference,
            _id_previewSignature7,
            jni.JniCallType.objectType,
            [jni.JValueFloat(f), pKCS7Signer.reference]).object);
  }

  static final _id_sign = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sign",
      r"(Lcom/artifex/mupdf/fitz/PKCS7Signer;ILcom/artifex/mupdf/fitz/Image;Ljava/lang/String;Ljava/lang/String;)Z");

  /// from: public boolean sign(com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, int i, com.artifex.mupdf.fitz.Image image, java.lang.String string, java.lang.String string1)
  bool sign(
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    int i,
    image_.Image image,
    jni.JString string,
    jni.JString string1,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_sign, jni.JniCallType.booleanType, [
      pKCS7Signer.reference,
      jni.JValueInt(i),
      image.reference,
      string.reference,
      string1.reference
    ]).boolean;
  }

  static final _id_sign1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"sign",
      r"(Lcom/artifex/mupdf/fitz/PKCS7Signer;Lcom/artifex/mupdf/fitz/Image;)Z");

  /// from: public boolean sign(com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer, com.artifex.mupdf.fitz.Image image)
  bool sign1(
    pkcs7signer_.PKCS7Signer pKCS7Signer,
    image_.Image image,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_sign1,
        jni.JniCallType.booleanType,
        [pKCS7Signer.reference, image.reference]).boolean;
  }

  static final _id_sign2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"sign", r"(Lcom/artifex/mupdf/fitz/PKCS7Signer;)Z");

  /// from: public boolean sign(com.artifex.mupdf.fitz.PKCS7Signer pKCS7Signer)
  bool sign2(
    pkcs7signer_.PKCS7Signer pKCS7Signer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_sign2,
        jni.JniCallType.booleanType, [pKCS7Signer.reference]).boolean;
  }

  static final _id_checkCertificate = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkCertificate",
      r"(Lcom/artifex/mupdf/fitz/PKCS7Verifier;)I");

  /// from: public native int checkCertificate(com.artifex.mupdf.fitz.PKCS7Verifier pKCS7Verifier)
  int checkCertificate(
    pkcs7verifier_.PKCS7Verifier pKCS7Verifier,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkCertificate,
        jni.JniCallType.intType, [pKCS7Verifier.reference]).integer;
  }

  static final _id_checkDigest = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"checkDigest",
      r"(Lcom/artifex/mupdf/fitz/PKCS7Verifier;)I");

  /// from: public native int checkDigest(com.artifex.mupdf.fitz.PKCS7Verifier pKCS7Verifier)
  int checkDigest(
    pkcs7verifier_.PKCS7Verifier pKCS7Verifier,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_checkDigest,
        jni.JniCallType.intType, [pKCS7Verifier.reference]).integer;
  }

  static final _id_incrementalChangeAfterSigning = jni.Jni.accessors
      .getMethodIDOf(
          _class.reference, r"incrementalChangeAfterSigning", r"()Z");

  /// from: public native boolean incrementalChangeAfterSigning()
  bool incrementalChangeAfterSigning() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_incrementalChangeAfterSigning,
        jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_verify = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"verify", r"(Lcom/artifex/mupdf/fitz/PKCS7Verifier;)Z");

  /// from: public boolean verify(com.artifex.mupdf.fitz.PKCS7Verifier pKCS7Verifier)
  bool verify(
    pkcs7verifier_.PKCS7Verifier pKCS7Verifier,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_verify,
        jni.JniCallType.booleanType, [pKCS7Verifier.reference]).boolean;
  }

  static final _id_getDistinguishedName = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getDistinguishedName",
      r"(Lcom/artifex/mupdf/fitz/PKCS7Verifier;)Lcom/artifex/mupdf/fitz/PKCS7DistinguishedName;");

  /// from: public native com.artifex.mupdf.fitz.PKCS7DistinguishedName getDistinguishedName(com.artifex.mupdf.fitz.PKCS7Verifier pKCS7Verifier)
  /// The returned object must be deleted after use, by calling the `delete` method.
  pkcs7distinguishedname_.PKCS7DistinguishedName getDistinguishedName(
    pkcs7verifier_.PKCS7Verifier pKCS7Verifier,
  ) {
    return const pkcs7distinguishedname_.$PKCS7DistinguishedNameType().fromRef(
        jni.Jni.accessors.callMethodWithArgs(
            reference,
            _id_getDistinguishedName,
            jni.JniCallType.objectType,
            [pKCS7Verifier.reference]).object);
  }

  static final _id_validateSignature = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"validateSignature", r"()I");

  /// from: public native int validateSignature()
  int validateSignature() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_validateSignature, jni.JniCallType.intType, []).integer;
  }

  static final _id_clearSignature = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"clearSignature", r"()V");

  /// from: public native void clearSignature()
  void clearSignature() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_clearSignature, jni.JniCallType.voidType, []).check();
  }

  static final _id_isSigned =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"isSigned", r"()Z");

  /// from: public native boolean isSigned()
  bool isSigned() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_isSigned, jni.JniCallType.booleanType, []).boolean;
  }

  static final _id_layoutTextWidget = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"layoutTextWidget",
      r"()Lcom/artifex/mupdf/fitz/PDFWidget$TextWidgetLayout;");

  /// from: public native com.artifex.mupdf.fitz.PDFWidget$TextWidgetLayout layoutTextWidget()
  /// The returned object must be deleted after use, by calling the `delete` method.
  PDFWidget_TextWidgetLayout layoutTextWidget() {
    return const $PDFWidget_TextWidgetLayoutType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_layoutTextWidget,
            jni.JniCallType.objectType, []).object);
  }
}

class $PDFWidgetType extends jni.JObjType<PDFWidget> {
  const $PDFWidgetType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PDFWidget;";

  @override
  PDFWidget fromRef(jni.JObjectPtr ref) => PDFWidget.fromRef(ref);

  @override
  jni.JObjType get superType => const pdfannotation_.$PDFAnnotationType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($PDFWidgetType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PDFWidgetType) && other is $PDFWidgetType;
  }
}

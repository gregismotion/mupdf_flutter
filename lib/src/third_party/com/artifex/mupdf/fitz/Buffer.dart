// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.Buffer
class Buffer extends jni.JObject {
  @override
  late final jni.JObjType<Buffer> $type = type;

  Buffer.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Buffer");

  /// The type which includes information such as the signature of this class.
  static const type = $BufferType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(I)V");

  /// from: public void <init>(int i)
  /// The returned object must be released after use, by calling the [release] method.
  factory Buffer(
    int i,
  ) {
    return Buffer.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new0, [jni.JValueInt(i)]).object);
  }

  static final _id_new1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Buffer.new1() {
    return Buffer.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new1, []).object);
  }

  static final _id_new2 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(J)V");

  /// from: protected void <init>(long j)
  /// The returned object must be released after use, by calling the [release] method.
  factory Buffer.new2(
    int j,
  ) {
    return Buffer.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new2, [j]).object);
  }

  static final _id_getLength =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"getLength", r"()I");

  /// from: public native int getLength()
  int getLength() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getLength, jni.JniCallType.intType, []).integer;
  }

  static final _id_readByte =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"readByte", r"(I)I");

  /// from: public native int readByte(int i)
  int readByte(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_readByte,
        jni.JniCallType.intType, [jni.JValueInt(i)]).integer;
  }

  static final _id_readBytes = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"readBytes", r"(I[B)I");

  /// from: public native int readBytes(int i, byte[] bs)
  int readBytes(
    int i,
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_readBytes,
        jni.JniCallType.intType, [jni.JValueInt(i), bs.reference]).integer;
  }

  static final _id_readBytesInto = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"readBytesInto", r"(I[BII)I");

  /// from: public native int readBytesInto(int i, byte[] bs, int i1, int i2)
  int readBytesInto(
    int i,
    jni.JArray<jni.jbyte> bs,
    int i1,
    int i2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_readBytesInto, jni.JniCallType.intType, [
      jni.JValueInt(i),
      bs.reference,
      jni.JValueInt(i1),
      jni.JValueInt(i2)
    ]).integer;
  }

  static final _id_writeByte =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"writeByte", r"(B)V");

  /// from: public native void writeByte(byte b)
  void writeByte(
    int b,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeByte,
        jni.JniCallType.voidType, [jni.JValueByte(b)]).check();
  }

  static final _id_writeBytes = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"writeBytes", r"([B)V");

  /// from: public native void writeBytes(byte[] bs)
  void writeBytes(
    jni.JArray<jni.jbyte> bs,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeBytes,
        jni.JniCallType.voidType, [bs.reference]).check();
  }

  static final _id_writeBytesFrom = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"writeBytesFrom", r"([BII)V");

  /// from: public native void writeBytesFrom(byte[] bs, int i, int i1)
  void writeBytesFrom(
    jni.JArray<jni.jbyte> bs,
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_writeBytesFrom,
        jni.JniCallType.voidType,
        [bs.reference, jni.JValueInt(i), jni.JValueInt(i1)]).check();
  }

  static final _id_writeBuffer = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeBuffer", r"(Lcom/artifex/mupdf/fitz/Buffer;)V");

  /// from: public native void writeBuffer(com.artifex.mupdf.fitz.Buffer buffer)
  void writeBuffer(
    Buffer buffer,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeBuffer,
        jni.JniCallType.voidType, [buffer.reference]).check();
  }

  static final _id_writeRune =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"writeRune", r"(I)V");

  /// from: public native void writeRune(int i)
  void writeRune(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeRune,
        jni.JniCallType.voidType, [jni.JValueInt(i)]).check();
  }

  static final _id_writeLine = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"writeLine", r"(Ljava/lang/String;)V");

  /// from: public native void writeLine(java.lang.String string)
  void writeLine(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeLine,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_writeLines = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeLines", r"([Ljava/lang/String;)V");

  /// from: public native void writeLines(java.lang.String[] strings)
  void writeLines(
    jni.JArray<jni.JString> strings,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeLines,
        jni.JniCallType.voidType, [strings.reference]).check();
  }

  static final _id_slice = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"slice", r"(II)Lcom/artifex/mupdf/fitz/Buffer;");

  /// from: public native com.artifex.mupdf.fitz.Buffer slice(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  Buffer slice(
    int i,
    int i1,
  ) {
    return const $BufferType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_slice,
        jni.JniCallType.objectType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_slice1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"slice", r"(I)Lcom/artifex/mupdf/fitz/Buffer;");

  /// from: public com.artifex.mupdf.fitz.Buffer slice(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Buffer slice1(
    int i,
  ) {
    return const $BufferType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_slice1,
        jni.JniCallType.objectType,
        [jni.JValueInt(i)]).object);
  }

  static final _id_slice2 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"slice", r"()Lcom/artifex/mupdf/fitz/Buffer;");

  /// from: public com.artifex.mupdf.fitz.Buffer slice()
  /// The returned object must be released after use, by calling the [release] method.
  Buffer slice2() {
    return const $BufferType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_slice2, jni.JniCallType.objectType, []).object);
  }

  static final _id_save = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"save", r"(Ljava/lang/String;)V");

  /// from: public native void save(java.lang.String string)
  void save(
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_save,
        jni.JniCallType.voidType, [string.reference]).check();
  }

  static final _id_readIntoStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"readIntoStream", r"(Ljava/io/OutputStream;)V");

  /// from: public void readIntoStream(java.io.OutputStream outputStream)
  void readIntoStream(
    jni.JObject outputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_readIntoStream,
        jni.JniCallType.voidType, [outputStream.reference]).check();
  }

  static final _id_writeFromStream = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"writeFromStream", r"(Ljava/io/InputStream;)V");

  /// from: public void writeFromStream(java.io.InputStream inputStream)
  void writeFromStream(
    jni.JObject inputStream,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_writeFromStream,
        jni.JniCallType.voidType, [inputStream.reference]).check();
  }
}

class $BufferType extends jni.JObjType<Buffer> {
  const $BufferType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Buffer;";

  @override
  Buffer fromRef(jni.JObjectPtr ref) => Buffer.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BufferType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BufferType) && other is $BufferType;
  }
}

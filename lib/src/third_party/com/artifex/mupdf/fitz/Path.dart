// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Point.dart" as point_;

import "Matrix.dart" as matrix_;

import "StrokeState.dart" as strokestate_;

import "Rect.dart" as rect_;

import "PathWalker.dart" as pathwalker_;

/// from: com.artifex.mupdf.fitz.Path
class Path extends jni.JObject {
  @override
  late final jni.JObjType<Path> $type = type;

  Path.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Path");

  /// The type which includes information such as the signature of this class.
  static const type = $PathType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Path() {
    return Path.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_ctor, []).object);
  }

  static final _id_ctor1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Path;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Path path)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Path.ctor1(
    Path path,
  ) {
    return Path.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor1, [path.reference]).object);
  }

  static final _id_currentPoint = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"currentPoint", r"()Lcom/artifex/mupdf/fitz/Point;");

  /// from: public native com.artifex.mupdf.fitz.Point currentPoint()
  /// The returned object must be deleted after use, by calling the `delete` method.
  point_.Point currentPoint() {
    return const point_.$PointType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_currentPoint,
            jni.JniCallType.objectType, []).object);
  }

  static final _id_moveTo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"moveTo", r"(FF)V");

  /// from: public native void moveTo(float f, float f1)
  void moveTo(
    double f,
    double f1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_moveTo,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f), jni.JValueFloat(f1)]).check();
  }

  static final _id_lineTo =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"lineTo", r"(FF)V");

  /// from: public native void lineTo(float f, float f1)
  void lineTo(
    double f,
    double f1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_lineTo,
        jni.JniCallType.voidType,
        [jni.JValueFloat(f), jni.JValueFloat(f1)]).check();
  }

  static final _id_curveTo = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"curveTo", r"(FFFFFF)V");

  /// from: public native void curveTo(float f, float f1, float f2, float f3, float f4, float f5)
  void curveTo(
    double f,
    double f1,
    double f2,
    double f3,
    double f4,
    double f5,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_curveTo, jni.JniCallType.voidType, [
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3),
      jni.JValueFloat(f4),
      jni.JValueFloat(f5)
    ]).check();
  }

  static final _id_curveToV = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"curveToV", r"(FFFF)V");

  /// from: public native void curveToV(float f, float f1, float f2, float f3)
  void curveToV(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_curveToV, jni.JniCallType.voidType, [
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3)
    ]).check();
  }

  static final _id_curveToY = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"curveToY", r"(FFFF)V");

  /// from: public native void curveToY(float f, float f1, float f2, float f3)
  void curveToY(
    double f,
    double f1,
    double f2,
    double f3,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_curveToY, jni.JniCallType.voidType, [
      jni.JValueFloat(f),
      jni.JValueFloat(f1),
      jni.JValueFloat(f2),
      jni.JValueFloat(f3)
    ]).check();
  }

  static final _id_rect =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"rect", r"(IIII)V");

  /// from: public native void rect(int i, int i1, int i2, int i3)
  void rect(
    int i,
    int i1,
    int i2,
    int i3,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_rect, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      jni.JValueInt(i1),
      jni.JValueInt(i2),
      jni.JValueInt(i3)
    ]).check();
  }

  static final _id_closePath =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"closePath", r"()V");

  /// from: public native void closePath()
  void closePath() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_closePath, jni.JniCallType.voidType, []).check();
  }

  static final _id_moveTo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"moveTo", r"(Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void moveTo(com.artifex.mupdf.fitz.Point point)
  void moveTo1(
    point_.Point point,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_moveTo1,
        jni.JniCallType.voidType, [point.reference]).check();
  }

  static final _id_lineTo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"lineTo", r"(Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void lineTo(com.artifex.mupdf.fitz.Point point)
  void lineTo1(
    point_.Point point,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_lineTo1,
        jni.JniCallType.voidType, [point.reference]).check();
  }

  static final _id_curveTo1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"curveTo",
      r"(Lcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void curveTo(com.artifex.mupdf.fitz.Point point, com.artifex.mupdf.fitz.Point point1, com.artifex.mupdf.fitz.Point point2)
  void curveTo1(
    point_.Point point,
    point_.Point point1,
    point_.Point point2,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_curveTo1,
        jni.JniCallType.voidType,
        [point.reference, point1.reference, point2.reference]).check();
  }

  static final _id_curveToV1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"curveToV",
      r"(Lcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void curveToV(com.artifex.mupdf.fitz.Point point, com.artifex.mupdf.fitz.Point point1)
  void curveToV1(
    point_.Point point,
    point_.Point point1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_curveToV1,
        jni.JniCallType.voidType, [point.reference, point1.reference]).check();
  }

  static final _id_curveToY1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"curveToY",
      r"(Lcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void curveToY(com.artifex.mupdf.fitz.Point point, com.artifex.mupdf.fitz.Point point1)
  void curveToY1(
    point_.Point point,
    point_.Point point1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_curveToY1,
        jni.JniCallType.voidType, [point.reference, point1.reference]).check();
  }

  static final _id_transform = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"transform", r"(Lcom/artifex/mupdf/fitz/Matrix;)V");

  /// from: public native void transform(com.artifex.mupdf.fitz.Matrix matrix)
  void transform(
    matrix_.Matrix matrix,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_transform,
        jni.JniCallType.voidType, [matrix.reference]).check();
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getBounds",
      r"(Lcom/artifex/mupdf/fitz/StrokeState;Lcom/artifex/mupdf/fitz/Matrix;)Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public native com.artifex.mupdf.fitz.Rect getBounds(com.artifex.mupdf.fitz.StrokeState strokeState, com.artifex.mupdf.fitz.Matrix matrix)
  /// The returned object must be deleted after use, by calling the `delete` method.
  rect_.Rect getBounds(
    strokestate_.StrokeState strokeState,
    matrix_.Matrix matrix,
  ) {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBounds,
        jni.JniCallType.objectType,
        [strokeState.reference, matrix.reference]).object);
  }

  static final _id_walk = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"walk", r"(Lcom/artifex/mupdf/fitz/PathWalker;)V");

  /// from: public native void walk(com.artifex.mupdf.fitz.PathWalker pathWalker)
  void walk(
    pathwalker_.PathWalker pathWalker,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_walk,
        jni.JniCallType.voidType, [pathWalker.reference]).check();
  }
}

class $PathType extends jni.JObjType<Path> {
  const $PathType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Path;";

  @override
  Path fromRef(jni.JObjectPtr ref) => Path.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PathType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PathType) && other is $PathType;
  }
}

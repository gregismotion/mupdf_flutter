// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.Font
class Font extends jni.JObject {
  @override
  late final jni.JObjType<Font> $type = type;

  Font.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Font");

  /// The type which includes information such as the signature of this class.
  static const type = $FontType();

  /// from: static public final int SIMPLE_ENCODING_LATIN
  static const SIMPLE_ENCODING_LATIN = 0;

  /// from: static public final int SIMPLE_ENCODING_GREEK
  static const SIMPLE_ENCODING_GREEK = 1;

  /// from: static public final int SIMPLE_ENCODING_CYRILLIC
  static const SIMPLE_ENCODING_CYRILLIC = 2;

  /// from: static public final int ADOBE_CNS
  static const ADOBE_CNS = 0;

  /// from: static public final int ADOBE_GB
  static const ADOBE_GB = 1;

  /// from: static public final int ADOBE_JAPAN
  static const ADOBE_JAPAN = 2;

  /// from: static public final int ADOBE_KOREA
  static const ADOBE_KOREA = 3;

  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;I)V");

  /// from: public void <init>(java.lang.String string, int i)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Font(
    jni.JString string,
    int i,
  ) {
    return Font.fromRef(jni.Jni.accessors.newObjectWithArgs(_class.reference,
        _id_ctor, [string.reference, jni.JValueInt(i)]).object);
  }

  static final _id_ctor1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory Font.ctor1(
    jni.JString string,
  ) {
    return Font.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor1, [string.reference]).object);
  }

  static final _id_getName = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"getName", r"()Ljava/lang/String;");

  /// from: public native java.lang.String getName()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString getName() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_getName, jni.JniCallType.objectType, []).object);
  }

  static final _id_encodeCharacter = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"encodeCharacter", r"(I)I");

  /// from: public native int encodeCharacter(int i)
  int encodeCharacter(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_encodeCharacter,
        jni.JniCallType.intType, [jni.JValueInt(i)]).integer;
  }

  static final _id_advanceGlyph = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"advanceGlyph", r"(IZ)F");

  /// from: public native float advanceGlyph(int i, boolean z)
  double advanceGlyph(
    int i,
    bool z,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_advanceGlyph,
        jni.JniCallType.floatType, [jni.JValueInt(i), z ? 1 : 0]).float;
  }

  static final _id_advanceGlyph1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"advanceGlyph", r"(I)F");

  /// from: public float advanceGlyph(int i)
  double advanceGlyph1(
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_advanceGlyph1,
        jni.JniCallType.floatType, [jni.JValueInt(i)]).float;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

class $FontType extends jni.JObjType<Font> {
  const $FontType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Font;";

  @override
  Font fromRef(jni.JObjectPtr ref) => Font.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($FontType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($FontType) && other is $FontType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.PKCS7DistinguishedName
class PKCS7DistinguishedName extends jni.JObject {
  @override
  late final jni.JObjType<PKCS7DistinguishedName> $type = type;

  PKCS7DistinguishedName.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/PKCS7DistinguishedName");

  /// The type which includes information such as the signature of this class.
  static const type = $PKCS7DistinguishedNameType();
  static final _id_cn = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"cn",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String cn
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get cn => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_cn, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String cn
  /// The returned object must be released after use, by calling the [release] method.
  set cn(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_cn, value.reference);

  static final _id_o = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"o",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String o
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get o => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_o, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String o
  /// The returned object must be released after use, by calling the [release] method.
  set o(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_o, value.reference);

  static final _id_ou = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"ou",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String ou
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get ou => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_ou, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String ou
  /// The returned object must be released after use, by calling the [release] method.
  set ou(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_ou, value.reference);

  static final _id_email = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"email",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String email
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get email => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_email, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String email
  /// The returned object must be released after use, by calling the [release] method.
  set email(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_email, value.reference);

  static final _id_c = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"c",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String c
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get c => const jni.JStringType().fromRef(jni.Jni.accessors
      .getField(reference, _id_c, jni.JniCallType.objectType)
      .object);

  /// from: public java.lang.String c
  /// The returned object must be released after use, by calling the [release] method.
  set c(jni.JString value) =>
      jni.Jni.env.SetObjectField(reference, _id_c, value.reference);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory PKCS7DistinguishedName() {
    return PKCS7DistinguishedName.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }
}

class $PKCS7DistinguishedNameType extends jni.JObjType<PKCS7DistinguishedName> {
  const $PKCS7DistinguishedNameType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/PKCS7DistinguishedName;";

  @override
  PKCS7DistinguishedName fromRef(jni.JObjectPtr ref) =>
      PKCS7DistinguishedName.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PKCS7DistinguishedNameType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PKCS7DistinguishedNameType) &&
        other is $PKCS7DistinguishedNameType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "SeekableOutputStream.dart" as seekableoutputstream_;

import "Rect.dart" as rect_;

import "Device.dart" as device_;

/// from: com.artifex.mupdf.fitz.DocumentWriter$OCRListener
class DocumentWriter_OCRListener extends jni.JObject {
  @override
  late final jni.JObjType<DocumentWriter_OCRListener> $type = type;

  DocumentWriter_OCRListener.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/DocumentWriter$OCRListener");

  /// The type which includes information such as the signature of this class.
  static const type = $DocumentWriter_OCRListenerType();
  static final _id_progress =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"progress", r"(II)Z");

  /// from: public abstract boolean progress(int i, int i1)
  bool progress(
    int i,
    int i1,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_progress,
        jni.JniCallType.booleanType,
        [jni.JValueInt(i), jni.JValueInt(i1)]).boolean;
  }

  /// Maps a specific port to the implemented methods.
  static final Map<int, Map<String, Function>> _$methods = {};

  /// Maps a specific port to the type parameters.
  static final Map<int, Map<String, jni.JObjType>> _$types = {};

  ReceivePort? _$p;

  static final Finalizer<ReceivePort> _$finalizer = Finalizer(($p) {
    _$methods.remove($p.sendPort.nativePort);
    _$types.remove($p.sendPort.nativePort);
    $p.close();
  });

  @override
  void delete() {
    _$methods.remove(_$p?.sendPort.nativePort);
    _$types.remove(_$p?.sendPort.nativePort);
    _$p?.close();
    _$finalizer.detach(this);
    super.delete();
  }

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    final $d = $i.methodDescriptor.toDartString(deleteOriginal: true);
    final $a = $i.args;
    if ($d == r"progress(II)Z") {
      final $r = _$methods[$p]![$d]!(
        $a[0]
            .castTo(const jni.JIntegerType(), deleteOriginal: true)
            .intValue(deleteOriginal: true),
        $a[1]
            .castTo(const jni.JIntegerType(), deleteOriginal: true)
            .intValue(deleteOriginal: true),
      );
      return (jni.JBoolean($r)..setAsDeleted()).reference;
    }
    return jni.nullptr;
  }

  factory DocumentWriter_OCRListener.implement({
    required bool Function(int i, int i1) progress,
  }) {
    final $p = ReceivePort();
    final $x = DocumentWriter_OCRListener.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.artifex.mupdf.fitz.DocumentWriter$OCRListener",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$types[$a] = {};
    _$methods[$a] = {};
    _$methods[$a]![r"progress(II)Z"] = progress;
    _$finalizer.attach($x, $p, detach: $x);
    $p.listen(($m) {
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

class $DocumentWriter_OCRListenerType
    extends jni.JObjType<DocumentWriter_OCRListener> {
  const $DocumentWriter_OCRListenerType();

  @override
  String get signature =>
      r"Lcom/artifex/mupdf/fitz/DocumentWriter$OCRListener;";

  @override
  DocumentWriter_OCRListener fromRef(jni.JObjectPtr ref) =>
      DocumentWriter_OCRListener.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DocumentWriter_OCRListenerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DocumentWriter_OCRListenerType) &&
        other is $DocumentWriter_OCRListenerType;
  }
}

/// from: com.artifex.mupdf.fitz.DocumentWriter
class DocumentWriter extends jni.JObject {
  @override
  late final jni.JObjType<DocumentWriter> $type = type;

  DocumentWriter.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/DocumentWriter");

  /// The type which includes information such as the signature of this class.
  static const type = $DocumentWriterType();
  static final _id_finalize =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"finalize", r"()V");

  /// from: protected native void finalize()
  void finalize() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_finalize, jni.JniCallType.voidType, []).check();
  }

  static final _id_destroy =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"destroy", r"()V");

  /// from: public void destroy()
  void destroy() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_destroy, jni.JniCallType.voidType, []).check();
  }

  static final _id_ctor = jni.Jni.accessors.getMethodIDOf(_class.reference,
      r"<init>", r"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String string, java.lang.String string1, java.lang.String string2)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory DocumentWriter(
    jni.JString string,
    jni.JString string1,
    jni.JString string2,
  ) {
    return DocumentWriter.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_ctor,
        [string.reference, string1.reference, string2.reference]).object);
  }

  static final _id_ctor1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"<init>",
      r"(Lcom/artifex/mupdf/fitz/SeekableOutputStream;Ljava/lang/String;Ljava/lang/String;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.SeekableOutputStream seekableOutputStream, java.lang.String string, java.lang.String string1)
  /// The returned object must be deleted after use, by calling the `delete` method.
  factory DocumentWriter.ctor1(
    seekableoutputstream_.SeekableOutputStream seekableOutputStream,
    jni.JString string,
    jni.JString string1,
  ) {
    return DocumentWriter.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_ctor1, [
      seekableOutputStream.reference,
      string.reference,
      string1.reference
    ]).object);
  }

  static final _id_beginPage = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"beginPage",
      r"(Lcom/artifex/mupdf/fitz/Rect;)Lcom/artifex/mupdf/fitz/Device;");

  /// from: public native com.artifex.mupdf.fitz.Device beginPage(com.artifex.mupdf.fitz.Rect rect)
  /// The returned object must be deleted after use, by calling the `delete` method.
  device_.Device beginPage(
    rect_.Rect rect,
  ) {
    return const device_.$DeviceType().fromRef(jni.Jni.accessors
        .callMethodWithArgs(reference, _id_beginPage,
            jni.JniCallType.objectType, [rect.reference]).object);
  }

  static final _id_endPage =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"endPage", r"()V");

  /// from: public native void endPage()
  void endPage() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_endPage, jni.JniCallType.voidType, []).check();
  }

  static final _id_close =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"close", r"()V");

  /// from: public native void close()
  void close() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_close, jni.JniCallType.voidType, []).check();
  }

  static final _id_addOCRListener = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"addOCRListener",
      r"(Lcom/artifex/mupdf/fitz/DocumentWriter$OCRListener;)V");

  /// from: public native void addOCRListener(com.artifex.mupdf.fitz.DocumentWriter$OCRListener oCRListener)
  void addOCRListener(
    DocumentWriter_OCRListener oCRListener,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_addOCRListener,
        jni.JniCallType.voidType, [oCRListener.reference]).check();
  }
}

class $DocumentWriterType extends jni.JObjType<DocumentWriter> {
  const $DocumentWriterType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/DocumentWriter;";

  @override
  DocumentWriter fromRef(jni.JObjectPtr ref) => DocumentWriter.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($DocumentWriterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($DocumentWriterType) &&
        other is $DocumentWriterType;
  }
}

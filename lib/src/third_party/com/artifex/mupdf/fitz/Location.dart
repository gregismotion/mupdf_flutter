// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: com.artifex.mupdf.fitz.Location
class Location extends jni.JObject {
  @override
  late final jni.JObjType<Location> $type = type;

  Location.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Location");

  /// The type which includes information such as the signature of this class.
  static const type = $LocationType();
  static final _id_chapter = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"chapter",
    r"I",
  );

  /// from: public final int chapter
  int get chapter => jni.Jni.accessors
      .getField(reference, _id_chapter, jni.JniCallType.intType)
      .integer;

  static final _id_page = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"page",
    r"I",
  );

  /// from: public final int page
  int get page => jni.Jni.accessors
      .getField(reference, _id_page, jni.JniCallType.intType)
      .integer;

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(II)V");

  /// from: public void <init>(int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Location(
    int i,
    int i1,
  ) {
    return Location.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference,
        _id_new0,
        [jni.JValueInt(i), jni.JValueInt(i1)]).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [object.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }
}

class $LocationType extends jni.JObjType<Location> {
  const $LocationType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Location;";

  @override
  Location fromRef(jni.JObjectPtr ref) => Location.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($LocationType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($LocationType) && other is $LocationType;
  }
}

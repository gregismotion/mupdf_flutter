// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Matrix.dart" as matrix_;

/// from: com.artifex.mupdf.fitz.Point
class Point extends jni.JObject {
  @override
  late final jni.JObjType<Point> $type = type;

  Point.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/artifex/mupdf/fitz/Point");

  /// The type which includes information such as the signature of this class.
  static const type = $PointType();
  static final _id_x = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"x",
    r"F",
  );

  /// from: public float x
  double get x => jni.Jni.accessors
      .getField(reference, _id_x, jni.JniCallType.floatType)
      .float;

  /// from: public float x
  set x(double value) => jni.Jni.env.SetFloatField(reference, _id_x, value);

  static final _id_y = jni.Jni.accessors.getFieldIDOf(
    _class.reference,
    r"y",
    r"F",
  );

  /// from: public float y
  double get y => jni.Jni.accessors
      .getField(reference, _id_y, jni.JniCallType.floatType)
      .float;

  /// from: public float y
  set y(double value) => jni.Jni.env.SetFloatField(reference, _id_y, value);

  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"(FF)V");

  /// from: public void <init>(float f, float f1)
  /// The returned object must be released after use, by calling the [release] method.
  factory Point(
    double f,
    double f1,
  ) {
    return Point.fromRef(jni.Jni.accessors.newObjectWithArgs(_class.reference,
        _id_new0, [jni.JValueFloat(f), jni.JValueFloat(f1)]).object);
  }

  static final _id_new1 = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"<init>", r"(Lcom/artifex/mupdf/fitz/Point;)V");

  /// from: public void <init>(com.artifex.mupdf.fitz.Point point)
  /// The returned object must be released after use, by calling the [release] method.
  factory Point.new1(
    Point point,
  ) {
    return Point.fromRef(jni.Jni.accessors.newObjectWithArgs(
        _class.reference, _id_new1, [point.reference]).object);
  }

  static final _id_toString1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return const jni.JStringType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference, _id_toString1, jni.JniCallType.objectType, []).object);
  }

  static final _id_transform = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"transform",
      r"(Lcom/artifex/mupdf/fitz/Matrix;)Lcom/artifex/mupdf/fitz/Point;");

  /// from: public com.artifex.mupdf.fitz.Point transform(com.artifex.mupdf.fitz.Matrix matrix)
  /// The returned object must be released after use, by calling the [release] method.
  Point transform(
    matrix_.Matrix matrix,
  ) {
    return const $PointType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_transform,
        jni.JniCallType.objectType,
        [matrix.reference]).object);
  }

  static final _id_equals1 = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object object)
  bool equals1(
    jni.JObject object,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_equals1,
        jni.JniCallType.booleanType, [object.reference]).boolean;
  }

  static final _id_hashCode1 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"hashCode", r"()I");

  /// from: public int hashCode()
  int hashCode1() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_hashCode1, jni.JniCallType.intType, []).integer;
  }
}

class $PointType extends jni.JObjType<Point> {
  const $PointType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/Point;";

  @override
  Point fromRef(jni.JObjectPtr ref) => Point.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PointType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PointType) && other is $PointType;
  }
}

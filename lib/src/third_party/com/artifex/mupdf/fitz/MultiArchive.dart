// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Archive.dart" as archive_;

/// from: com.artifex.mupdf.fitz.MultiArchive
class MultiArchive extends archive_.Archive {
  @override
  late final jni.JObjType<MultiArchive> $type = type;

  MultiArchive.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/MultiArchive");

  /// The type which includes information such as the signature of this class.
  static const type = $MultiArchiveType();
  static final _id_mountArchive = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"mountArchive",
      r"(Lcom/artifex/mupdf/fitz/Archive;Ljava/lang/String;)V");

  /// from: public native void mountArchive(com.artifex.mupdf.fitz.Archive archive, java.lang.String string)
  void mountArchive(
    archive_.Archive archive,
    jni.JString string,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_mountArchive,
        jni.JniCallType.voidType,
        [archive.reference, string.reference]).check();
  }
}

class $MultiArchiveType extends jni.JObjType<MultiArchive> {
  const $MultiArchiveType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/MultiArchive;";

  @override
  MultiArchive fromRef(jni.JObjectPtr ref) => MultiArchive.fromRef(ref);

  @override
  jni.JObjType get superType => const archive_.$ArchiveType();

  @override
  final superCount = 2;

  @override
  int get hashCode => ($MultiArchiveType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($MultiArchiveType) &&
        other is $MultiArchiveType;
  }
}

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Rect.dart" as rect_;

import "Matrix.dart" as matrix_;

import "Image.dart" as image_;

import "Point.dart" as point_;

import "Font.dart" as font_;

import "Quad.dart" as quad_;

/// from: com.artifex.mupdf.fitz.StructuredTextWalker
class StructuredTextWalker extends jni.JObject {
  @override
  late final jni.JObjType<StructuredTextWalker> $type = type;

  StructuredTextWalker.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class =
      jni.Jni.findJClass(r"com/artifex/mupdf/fitz/StructuredTextWalker");

  /// The type which includes information such as the signature of this class.
  static const type = $StructuredTextWalkerType();
  static final _id_onImageBlock = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onImageBlock",
      r"(Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Image;)V");

  /// from: public abstract void onImageBlock(com.artifex.mupdf.fitz.Rect rect, com.artifex.mupdf.fitz.Matrix matrix, com.artifex.mupdf.fitz.Image image)
  void onImageBlock(
    rect_.Rect rect,
    matrix_.Matrix matrix,
    image_.Image image,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_onImageBlock,
        jni.JniCallType.voidType,
        [rect.reference, matrix.reference, image.reference]).check();
  }

  static final _id_beginTextBlock = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"beginTextBlock", r"(Lcom/artifex/mupdf/fitz/Rect;)V");

  /// from: public abstract void beginTextBlock(com.artifex.mupdf.fitz.Rect rect)
  void beginTextBlock(
    rect_.Rect rect,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_beginTextBlock,
        jni.JniCallType.voidType, [rect.reference]).check();
  }

  static final _id_endTextBlock = jni.Jni.accessors
      .getMethodIDOf(_class.reference, r"endTextBlock", r"()V");

  /// from: public abstract void endTextBlock()
  void endTextBlock() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_endTextBlock, jni.JniCallType.voidType, []).check();
  }

  static final _id_beginLine = jni.Jni.accessors.getMethodIDOf(
      _class.reference, r"beginLine", r"(Lcom/artifex/mupdf/fitz/Rect;I)V");

  /// from: public abstract void beginLine(com.artifex.mupdf.fitz.Rect rect, int i)
  void beginLine(
    rect_.Rect rect,
    int i,
  ) {
    return jni.Jni.accessors.callMethodWithArgs(reference, _id_beginLine,
        jni.JniCallType.voidType, [rect.reference, jni.JValueInt(i)]).check();
  }

  static final _id_endLine =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"endLine", r"()V");

  /// from: public abstract void endLine()
  void endLine() {
    return jni.Jni.accessors.callMethodWithArgs(
        reference, _id_endLine, jni.JniCallType.voidType, []).check();
  }

  static final _id_onChar = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"onChar",
      r"(ILcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Font;FLcom/artifex/mupdf/fitz/Quad;)V");

  /// from: public abstract void onChar(int i, com.artifex.mupdf.fitz.Point point, com.artifex.mupdf.fitz.Font font, float f, com.artifex.mupdf.fitz.Quad quad)
  void onChar(
    int i,
    point_.Point point,
    font_.Font font,
    double f,
    quad_.Quad quad,
  ) {
    return jni.Jni.accessors
        .callMethodWithArgs(reference, _id_onChar, jni.JniCallType.voidType, [
      jni.JValueInt(i),
      point.reference,
      font.reference,
      jni.JValueFloat(f),
      quad.reference
    ]).check();
  }

  /// Maps a specific port to the implemented methods.
  static final Map<int, Map<String, Function>> _$methods = {};

  /// Maps a specific port to the type parameters.
  static final Map<int, Map<String, jni.JObjType>> _$types = {};

  ReceivePort? _$p;

  static final Finalizer<ReceivePort> _$finalizer = Finalizer(($p) {
    _$methods.remove($p.sendPort.nativePort);
    _$types.remove($p.sendPort.nativePort);
    $p.close();
  });

  @override
  void delete() {
    _$methods.remove(_$p?.sendPort.nativePort);
    _$types.remove(_$p?.sendPort.nativePort);
    _$p?.close();
    _$finalizer.detach(this);
    super.delete();
  }

  static jni.JObjectPtr _$invoke(
    int port,
    jni.JObjectPtr descriptor,
    jni.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      $MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final ffi.Pointer<
          ffi.NativeFunction<
              jni.JObjectPtr Function(
                  ffi.Uint64, jni.JObjectPtr, jni.JObjectPtr)>>
      _$invokePointer = ffi.Pointer.fromFunction(_$invoke);

  static ffi.Pointer<ffi.Void> _$invokeMethod(
    int $p,
    $MethodInvocation $i,
  ) {
    final $d = $i.methodDescriptor.toDartString(deleteOriginal: true);
    final $a = $i.args;
    if ($d ==
        r"onImageBlock(Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Image;)V") {
      _$methods[$p]![$d]!(
        $a[0].castTo(const rect_.$RectType(), deleteOriginal: true),
        $a[1].castTo(const matrix_.$MatrixType(), deleteOriginal: true),
        $a[2].castTo(const image_.$ImageType(), deleteOriginal: true),
      );
      return jni.nullptr;
    }
    if ($d == r"beginTextBlock(Lcom/artifex/mupdf/fitz/Rect;)V") {
      _$methods[$p]![$d]!(
        $a[0].castTo(const rect_.$RectType(), deleteOriginal: true),
      );
      return jni.nullptr;
    }
    if ($d == r"endTextBlock()V") {
      _$methods[$p]![$d]!();
      return jni.nullptr;
    }
    if ($d == r"beginLine(Lcom/artifex/mupdf/fitz/Rect;I)V") {
      _$methods[$p]![$d]!(
        $a[0].castTo(const rect_.$RectType(), deleteOriginal: true),
        $a[1]
            .castTo(const jni.JIntegerType(), deleteOriginal: true)
            .intValue(deleteOriginal: true),
      );
      return jni.nullptr;
    }
    if ($d == r"endLine()V") {
      _$methods[$p]![$d]!();
      return jni.nullptr;
    }
    if ($d ==
        r"onChar(ILcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Font;FLcom/artifex/mupdf/fitz/Quad;)V") {
      _$methods[$p]![$d]!(
        $a[0]
            .castTo(const jni.JIntegerType(), deleteOriginal: true)
            .intValue(deleteOriginal: true),
        $a[1].castTo(const point_.$PointType(), deleteOriginal: true),
        $a[2].castTo(const font_.$FontType(), deleteOriginal: true),
        $a[3]
            .castTo(const jni.JFloatType(), deleteOriginal: true)
            .floatValue(deleteOriginal: true),
        $a[4].castTo(const quad_.$QuadType(), deleteOriginal: true),
      );
      return jni.nullptr;
    }
    return jni.nullptr;
  }

  factory StructuredTextWalker.implement({
    required void Function(
            rect_.Rect rect, matrix_.Matrix matrix, image_.Image image)
        onImageBlock,
    required void Function(rect_.Rect rect) beginTextBlock,
    required void Function() endTextBlock,
    required void Function(rect_.Rect rect, int i) beginLine,
    required void Function() endLine,
    required void Function(int i, point_.Point point, font_.Font font, double f,
            quad_.Quad quad)
        onChar,
  }) {
    final $p = ReceivePort();
    final $x = StructuredTextWalker.fromRef(
      ProtectedJniExtensions.newPortProxy(
        r"com.artifex.mupdf.fitz.StructuredTextWalker",
        $p,
        _$invokePointer,
      ),
    ).._$p = $p;
    final $a = $p.sendPort.nativePort;
    _$types[$a] = {};
    _$methods[$a] = {};
    _$methods[$a]![
            r"onImageBlock(Lcom/artifex/mupdf/fitz/Rect;Lcom/artifex/mupdf/fitz/Matrix;Lcom/artifex/mupdf/fitz/Image;)V"] =
        onImageBlock;
    _$methods[$a]![r"beginTextBlock(Lcom/artifex/mupdf/fitz/Rect;)V"] =
        beginTextBlock;
    _$methods[$a]![r"endTextBlock()V"] = endTextBlock;
    _$methods[$a]![r"beginLine(Lcom/artifex/mupdf/fitz/Rect;I)V"] = beginLine;
    _$methods[$a]![r"endLine()V"] = endLine;
    _$methods[$a]![
            r"onChar(ILcom/artifex/mupdf/fitz/Point;Lcom/artifex/mupdf/fitz/Font;FLcom/artifex/mupdf/fitz/Quad;)V"] =
        onChar;
    _$finalizer.attach($x, $p, detach: $x);
    $p.listen(($m) {
      final $i = $MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      ProtectedJniExtensions.returnResult($i.result, $r);
    });
    return $x;
  }
}

class $StructuredTextWalkerType extends jni.JObjType<StructuredTextWalker> {
  const $StructuredTextWalkerType();

  @override
  String get signature => r"Lcom/artifex/mupdf/fitz/StructuredTextWalker;";

  @override
  StructuredTextWalker fromRef(jni.JObjectPtr ref) =>
      StructuredTextWalker.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StructuredTextWalkerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StructuredTextWalkerType) &&
        other is $StructuredTextWalkerType;
  }
}

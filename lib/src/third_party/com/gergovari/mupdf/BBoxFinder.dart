// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../artifex/mupdf/fitz/Page.dart" as page_;

import "../../artifex/mupdf/fitz/Rect.dart" as rect_;

/// from: com.gergovari.mupdf.BBoxFinder
class BBoxFinder extends jni.JObject {
  @override
  late final jni.JObjType<BBoxFinder> $type = type;

  BBoxFinder.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _class = jni.Jni.findJClass(r"com/gergovari/mupdf/BBoxFinder");

  /// The type which includes information such as the signature of this class.
  static const type = $BBoxFinderType();
  static final _id_new0 =
      jni.Jni.accessors.getMethodIDOf(_class.reference, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory BBoxFinder() {
    return BBoxFinder.fromRef(jni.Jni.accessors
        .newObjectWithArgs(_class.reference, _id_new0, []).object);
  }

  static final _id_getBounds = jni.Jni.accessors.getMethodIDOf(
      _class.reference,
      r"getBounds",
      r"(Lcom/artifex/mupdf/fitz/Page;)Lcom/artifex/mupdf/fitz/Rect;");

  /// from: public com.artifex.mupdf.fitz.Rect getBounds(com.artifex.mupdf.fitz.Page page)
  /// The returned object must be released after use, by calling the [release] method.
  rect_.Rect getBounds(
    page_.Page page,
  ) {
    return const rect_.$RectType().fromRef(jni.Jni.accessors.callMethodWithArgs(
        reference,
        _id_getBounds,
        jni.JniCallType.objectType,
        [page.reference]).object);
  }
}

class $BBoxFinderType extends jni.JObjType<BBoxFinder> {
  const $BBoxFinderType();

  @override
  String get signature => r"Lcom/gergovari/mupdf/BBoxFinder;";

  @override
  BBoxFinder fromRef(jni.JObjectPtr ref) => BBoxFinder.fromRef(ref);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($BBoxFinderType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($BBoxFinderType) && other is $BBoxFinderType;
  }
}
